"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/frappe-react-sdk";
exports.ids = ["vendor-chunks/frappe-react-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/frappe-react-sdk/dist/frappe-react-sdk.es.js":
/*!*******************************************************************!*\
  !*** ./node_modules/frappe-react-sdk/dist/frappe-react-sdk.es.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrappeContext: () => (/* binding */ te),\n/* harmony export */   FrappeProvider: () => (/* binding */ Ua),\n/* harmony export */   getDocListQueryString: () => (/* binding */ La),\n/* harmony export */   getRequestURL: () => (/* binding */ Bs),\n/* harmony export */   useFrappeAuth: () => (/* binding */ qa),\n/* harmony export */   useFrappeCreateDoc: () => (/* binding */ ja),\n/* harmony export */   useFrappeDeleteCall: () => (/* binding */ Ya),\n/* harmony export */   useFrappeDeleteDoc: () => (/* binding */ Ma),\n/* harmony export */   useFrappeDocTypeEventListener: () => (/* binding */ Xa),\n/* harmony export */   useFrappeDocumentEventListener: () => (/* binding */ Ga),\n/* harmony export */   useFrappeEventListener: () => (/* binding */ Bn),\n/* harmony export */   useFrappeFileUpload: () => (/* binding */ za),\n/* harmony export */   useFrappeGetCall: () => (/* binding */ Na),\n/* harmony export */   useFrappeGetDoc: () => (/* binding */ Ia),\n/* harmony export */   useFrappeGetDocCount: () => (/* binding */ Wa),\n/* harmony export */   useFrappeGetDocList: () => (/* binding */ Va),\n/* harmony export */   useFrappePostCall: () => (/* binding */ Ha),\n/* harmony export */   useFrappePutCall: () => (/* binding */ Ja),\n/* harmony export */   useFrappeUpdateDoc: () => (/* binding */ $a),\n/* harmony export */   useSWR: () => (/* binding */ vt),\n/* harmony export */   useSWRConfig: () => (/* binding */ No),\n/* harmony export */   useSearch: () => (/* binding */ Ka)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar Qs = Object.defineProperty;\nvar Zs = (n, e, t) => e in n ? Qs(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;\nvar xe = (n, e, t) => (Zs(n, typeof e != \"symbol\" ? e + \"\" : e, t), t);\n\nvar B = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, zt = {}, rt = {}, ft = {}, fe = B && B.__assign || function() {\n  return fe = Object.assign || function(n) {\n    for (var e, t = 1, r = arguments.length; t < r; t++) {\n      e = arguments[t];\n      for (var s in e)\n        Object.prototype.hasOwnProperty.call(e, s) && (n[s] = e[s]);\n    }\n    return n;\n  }, fe.apply(this, arguments);\n}, wt = B && B.__awaiter || function(n, e, t, r) {\n  function s(i) {\n    return i instanceof t ? i : new t(function(o) {\n      o(i);\n    });\n  }\n  return new (t || (t = Promise))(function(i, o) {\n    function u(h) {\n      try {\n        a(r.next(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function l(h) {\n      try {\n        a(r.throw(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function a(h) {\n      h.done ? i(h.value) : s(h.value).then(u, l);\n    }\n    a((r = r.apply(n, e || [])).next());\n  });\n}, Et = B && B.__generator || function(n, e) {\n  var t = { label: 0, sent: function() {\n    if (i[0] & 1)\n      throw i[1];\n    return i[1];\n  }, trys: [], ops: [] }, r, s, i, o;\n  return o = { next: u(0), throw: u(1), return: u(2) }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n    return this;\n  }), o;\n  function u(a) {\n    return function(h) {\n      return l([a, h]);\n    };\n  }\n  function l(a) {\n    if (r)\n      throw new TypeError(\"Generator is already executing.\");\n    for (; t; )\n      try {\n        if (r = 1, s && (i = a[0] & 2 ? s.return : a[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, a[1])).done)\n          return i;\n        switch (s = 0, i && (a = [a[0] & 2, i.value]), a[0]) {\n          case 0:\n          case 1:\n            i = a;\n            break;\n          case 4:\n            return t.label++, { value: a[1], done: !1 };\n          case 5:\n            t.label++, s = a[1], a = [0];\n            continue;\n          case 7:\n            a = t.ops.pop(), t.trys.pop();\n            continue;\n          default:\n            if (i = t.trys, !(i = i.length > 0 && i[i.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n              t = 0;\n              continue;\n            }\n            if (a[0] === 3 && (!i || a[1] > i[0] && a[1] < i[3])) {\n              t.label = a[1];\n              break;\n            }\n            if (a[0] === 6 && t.label < i[1]) {\n              t.label = i[1], i = a;\n              break;\n            }\n            if (i && t.label < i[2]) {\n              t.label = i[2], t.ops.push(a);\n              break;\n            }\n            i[2] && t.ops.pop(), t.trys.pop();\n            continue;\n        }\n        a = e.call(n, t);\n      } catch (h) {\n        a = [6, h], s = 0;\n      } finally {\n        r = i = 0;\n      }\n    if (a[0] & 5)\n      throw a[1];\n    return { value: a[0] ? a[1] : void 0, done: !0 };\n  }\n};\nObject.defineProperty(ft, \"__esModule\", { value: !0 });\nft.FrappeCall = void 0;\nvar ni = function() {\n  function n(e, t, r, s, i) {\n    this.appURL = e, this.axios = t, this.useToken = r != null ? r : !1, this.token = s, this.tokenType = i;\n  }\n  return n.prototype.get = function(e, t) {\n    return wt(this, void 0, void 0, function() {\n      return Et(this, function(r) {\n        return [2, this.axios.get(\"/api/method/\".concat(e), { params: t }).then(function(s) {\n          return s.data;\n        }).catch(function(s) {\n          var i, o;\n          throw fe(fe({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: (i = s.response.data.message) !== null && i !== void 0 ? i : \"There was an error.\", exception: (o = s.response.data.exception) !== null && o !== void 0 ? o : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.post = function(e, t) {\n    return wt(this, void 0, void 0, function() {\n      return Et(this, function(r) {\n        return [2, this.axios.post(\"/api/method/\".concat(e), fe({}, t)).then(function(s) {\n          return s.data;\n        }).catch(function(s) {\n          var i, o;\n          throw fe(fe({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: (i = s.response.data.message) !== null && i !== void 0 ? i : \"There was an error.\", exception: (o = s.response.data.exception) !== null && o !== void 0 ? o : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.put = function(e, t) {\n    return wt(this, void 0, void 0, function() {\n      return Et(this, function(r) {\n        return [2, this.axios.put(\"/api/method/\".concat(e), fe({}, t)).then(function(s) {\n          return s.data;\n        }).catch(function(s) {\n          var i, o;\n          throw fe(fe({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: (i = s.response.data.message) !== null && i !== void 0 ? i : \"There was an error.\", exception: (o = s.response.data.exception) !== null && o !== void 0 ? o : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.delete = function(e, t) {\n    return wt(this, void 0, void 0, function() {\n      return Et(this, function(r) {\n        return [2, this.axios.delete(\"/api/method/\".concat(e), { params: t }).then(function(s) {\n          return s.data;\n        }).catch(function(s) {\n          var i, o;\n          throw fe(fe({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: (i = s.response.data.message) !== null && i !== void 0 ? i : \"There was an error.\", exception: (o = s.response.data.exception) !== null && o !== void 0 ? o : \"\" });\n        })];\n      });\n    });\n  }, n;\n}();\nft.FrappeCall = ni;\nvar ht = {}, z = B && B.__assign || function() {\n  return z = Object.assign || function(n) {\n    for (var e, t = 1, r = arguments.length; t < r; t++) {\n      e = arguments[t];\n      for (var s in e)\n        Object.prototype.hasOwnProperty.call(e, s) && (n[s] = e[s]);\n    }\n    return n;\n  }, z.apply(this, arguments);\n}, Fe = B && B.__awaiter || function(n, e, t, r) {\n  function s(i) {\n    return i instanceof t ? i : new t(function(o) {\n      o(i);\n    });\n  }\n  return new (t || (t = Promise))(function(i, o) {\n    function u(h) {\n      try {\n        a(r.next(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function l(h) {\n      try {\n        a(r.throw(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function a(h) {\n      h.done ? i(h.value) : s(h.value).then(u, l);\n    }\n    a((r = r.apply(n, e || [])).next());\n  });\n}, Ue = B && B.__generator || function(n, e) {\n  var t = { label: 0, sent: function() {\n    if (i[0] & 1)\n      throw i[1];\n    return i[1];\n  }, trys: [], ops: [] }, r, s, i, o;\n  return o = { next: u(0), throw: u(1), return: u(2) }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n    return this;\n  }), o;\n  function u(a) {\n    return function(h) {\n      return l([a, h]);\n    };\n  }\n  function l(a) {\n    if (r)\n      throw new TypeError(\"Generator is already executing.\");\n    for (; t; )\n      try {\n        if (r = 1, s && (i = a[0] & 2 ? s.return : a[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, a[1])).done)\n          return i;\n        switch (s = 0, i && (a = [a[0] & 2, i.value]), a[0]) {\n          case 0:\n          case 1:\n            i = a;\n            break;\n          case 4:\n            return t.label++, { value: a[1], done: !1 };\n          case 5:\n            t.label++, s = a[1], a = [0];\n            continue;\n          case 7:\n            a = t.ops.pop(), t.trys.pop();\n            continue;\n          default:\n            if (i = t.trys, !(i = i.length > 0 && i[i.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n              t = 0;\n              continue;\n            }\n            if (a[0] === 3 && (!i || a[1] > i[0] && a[1] < i[3])) {\n              t.label = a[1];\n              break;\n            }\n            if (a[0] === 6 && t.label < i[1]) {\n              t.label = i[1], i = a;\n              break;\n            }\n            if (i && t.label < i[2]) {\n              t.label = i[2], t.ops.push(a);\n              break;\n            }\n            i[2] && t.ops.pop(), t.trys.pop();\n            continue;\n        }\n        a = e.call(n, t);\n      } catch (h) {\n        a = [6, h], s = 0;\n      } finally {\n        r = i = 0;\n      }\n    if (a[0] & 5)\n      throw a[1];\n    return { value: a[0] ? a[1] : void 0, done: !0 };\n  }\n};\nObject.defineProperty(ht, \"__esModule\", { value: !0 });\nht.FrappeDB = void 0;\nvar ri = function() {\n  function n(e, t, r, s, i) {\n    this.appURL = e, this.axios = t, this.useToken = r != null ? r : !1, this.token = s, this.tokenType = i;\n  }\n  return n.prototype.getDoc = function(e, t) {\n    return t === void 0 && (t = \"\"), Fe(this, void 0, void 0, function() {\n      return Ue(this, function(r) {\n        return [2, this.axios.get(\"/api/resource/\".concat(e, \"/\").concat(t)).then(function(s) {\n          return s.data.data;\n        }).catch(function(s) {\n          var i, o;\n          throw z(z({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: \"There was an error while fetching the document.\", exception: (o = (i = s.response.data.exception) !== null && i !== void 0 ? i : s.response.data.exc_type) !== null && o !== void 0 ? o : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.getDocList = function(e, t) {\n    var r;\n    return Fe(this, void 0, void 0, function() {\n      var s, i, o, u, l, a, h, f, p, m, g;\n      return Ue(this, function(b) {\n        return s = {}, t && (i = t.fields, o = t.filters, u = t.orFilters, l = t.orderBy, a = t.limit, h = t.limit_start, f = t.groupBy, p = t.asDict, m = p === void 0 ? !0 : p, g = l ? \"\".concat(String(l == null ? void 0 : l.field), \" \").concat((r = l == null ? void 0 : l.order) !== null && r !== void 0 ? r : \"asc\") : \"\", s = {\n          fields: i ? JSON.stringify(i) : void 0,\n          filters: o ? JSON.stringify(o) : void 0,\n          or_filters: u ? JSON.stringify(u) : void 0,\n          order_by: g,\n          group_by: f,\n          limit: a,\n          limit_start: h,\n          as_dict: m\n        }), [2, this.axios.get(\"/api/resource/\".concat(e), { params: s }).then(function(E) {\n          return E.data.data;\n        }).catch(function(E) {\n          var _, S;\n          throw z(z({}, E.response.data), { httpStatus: E.response.status, httpStatusText: E.response.statusText, message: \"There was an error while fetching the documents.\", exception: (S = (_ = E.response.data.exception) !== null && _ !== void 0 ? _ : E.response.data.exc_type) !== null && S !== void 0 ? S : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.createDoc = function(e, t) {\n    return Fe(this, void 0, void 0, function() {\n      return Ue(this, function(r) {\n        return [2, this.axios.post(\"/api/resource/\".concat(e), z({}, t)).then(function(s) {\n          return s.data.data;\n        }).catch(function(s) {\n          var i, o, u;\n          throw z(z({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: (i = s.response.data.message) !== null && i !== void 0 ? i : \"There was an error while creating the document.\", exception: (u = (o = s.response.data.exception) !== null && o !== void 0 ? o : s.response.data.exc_type) !== null && u !== void 0 ? u : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.updateDoc = function(e, t, r) {\n    return Fe(this, void 0, void 0, function() {\n      return Ue(this, function(s) {\n        return [2, this.axios.put(\"/api/resource/\".concat(e, \"/\").concat(t), z({}, r)).then(function(i) {\n          return i.data.data;\n        }).catch(function(i) {\n          var o, u, l;\n          throw z(z({}, i.response.data), { httpStatus: i.response.status, httpStatusText: i.response.statusText, message: (o = i.response.data.message) !== null && o !== void 0 ? o : \"There was an error while updating the document.\", exception: (l = (u = i.response.data.exception) !== null && u !== void 0 ? u : i.response.data.exc_type) !== null && l !== void 0 ? l : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.deleteDoc = function(e, t) {\n    return Fe(this, void 0, void 0, function() {\n      return Ue(this, function(r) {\n        return [2, this.axios.delete(\"/api/resource/\".concat(e, \"/\").concat(t)).then(function(s) {\n          return s.data;\n        }).catch(function(s) {\n          var i, o;\n          throw z(z({}, s.response.data), { httpStatus: s.response.status, httpStatusText: s.response.statusText, message: \"There was an error while deleting the document.\", exception: (o = (i = s.response.data.exception) !== null && i !== void 0 ? i : s.response.data.exc_type) !== null && o !== void 0 ? o : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.getCount = function(e, t, r, s) {\n    return r === void 0 && (r = !1), s === void 0 && (s = !1), Fe(this, void 0, void 0, function() {\n      var i;\n      return Ue(this, function(o) {\n        return i = {\n          doctype: e,\n          filters: []\n        }, r && (i.cache = r), s && (i.debug = s), t && (i.filters = t ? JSON.stringify(t) : void 0), [2, this.axios.get(\"/api/method/frappe.client.get_count\", { params: i }).then(function(u) {\n          return u.data.message;\n        }).catch(function(u) {\n          var l, a;\n          throw z(z({}, u.response.data), { httpStatus: u.response.status, httpStatusText: u.response.statusText, message: \"There was an error while getting the count.\", exception: (a = (l = u.response.data.exception) !== null && l !== void 0 ? l : u.response.data.exc_type) !== null && a !== void 0 ? a : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.getLastDoc = function(e, t) {\n    return Fe(this, void 0, void 0, function() {\n      var r, s;\n      return Ue(this, function(i) {\n        switch (i.label) {\n          case 0:\n            return r = {\n              orderBy: {\n                field: \"creation\",\n                order: \"desc\"\n              }\n            }, t && (r = z(z({}, r), t)), [4, this.getDocList(e, z(z({}, r), { limit: 1, fields: [\"name\"] }))];\n          case 1:\n            return s = i.sent(), s.length > 0 ? [2, this.getDoc(e, s[0].name)] : [2, {}];\n        }\n      });\n    });\n  }, n;\n}();\nht.FrappeDB = ri;\nvar dt = {}, Ft = B && B.__assign || function() {\n  return Ft = Object.assign || function(n) {\n    for (var e, t = 1, r = arguments.length; t < r; t++) {\n      e = arguments[t];\n      for (var s in e)\n        Object.prototype.hasOwnProperty.call(e, s) && (n[s] = e[s]);\n    }\n    return n;\n  }, Ft.apply(this, arguments);\n}, si = B && B.__awaiter || function(n, e, t, r) {\n  function s(i) {\n    return i instanceof t ? i : new t(function(o) {\n      o(i);\n    });\n  }\n  return new (t || (t = Promise))(function(i, o) {\n    function u(h) {\n      try {\n        a(r.next(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function l(h) {\n      try {\n        a(r.throw(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function a(h) {\n      h.done ? i(h.value) : s(h.value).then(u, l);\n    }\n    a((r = r.apply(n, e || [])).next());\n  });\n}, ii = B && B.__generator || function(n, e) {\n  var t = { label: 0, sent: function() {\n    if (i[0] & 1)\n      throw i[1];\n    return i[1];\n  }, trys: [], ops: [] }, r, s, i, o;\n  return o = { next: u(0), throw: u(1), return: u(2) }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n    return this;\n  }), o;\n  function u(a) {\n    return function(h) {\n      return l([a, h]);\n    };\n  }\n  function l(a) {\n    if (r)\n      throw new TypeError(\"Generator is already executing.\");\n    for (; t; )\n      try {\n        if (r = 1, s && (i = a[0] & 2 ? s.return : a[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, a[1])).done)\n          return i;\n        switch (s = 0, i && (a = [a[0] & 2, i.value]), a[0]) {\n          case 0:\n          case 1:\n            i = a;\n            break;\n          case 4:\n            return t.label++, { value: a[1], done: !1 };\n          case 5:\n            t.label++, s = a[1], a = [0];\n            continue;\n          case 7:\n            a = t.ops.pop(), t.trys.pop();\n            continue;\n          default:\n            if (i = t.trys, !(i = i.length > 0 && i[i.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n              t = 0;\n              continue;\n            }\n            if (a[0] === 3 && (!i || a[1] > i[0] && a[1] < i[3])) {\n              t.label = a[1];\n              break;\n            }\n            if (a[0] === 6 && t.label < i[1]) {\n              t.label = i[1], i = a;\n              break;\n            }\n            if (i && t.label < i[2]) {\n              t.label = i[2], t.ops.push(a);\n              break;\n            }\n            i[2] && t.ops.pop(), t.trys.pop();\n            continue;\n        }\n        a = e.call(n, t);\n      } catch (h) {\n        a = [6, h], s = 0;\n      } finally {\n        r = i = 0;\n      }\n    if (a[0] & 5)\n      throw a[1];\n    return { value: a[0] ? a[1] : void 0, done: !0 };\n  }\n};\nObject.defineProperty(dt, \"__esModule\", { value: !0 });\ndt.FrappeFileUpload = void 0;\nvar oi = function() {\n  function n(e, t, r, s, i) {\n    this.appURL = e, this.axios = t, this.useToken = r != null ? r : !1, this.token = s, this.tokenType = i;\n  }\n  return n.prototype.uploadFile = function(e, t, r, s) {\n    return s === void 0 && (s = \"upload_file\"), si(this, void 0, void 0, function() {\n      var i, o, u, l, a, h, f, p;\n      return ii(this, function(m) {\n        return i = new FormData(), e && i.append(\"file\", e, e.name), o = t.isPrivate, u = t.folder, l = t.file_url, a = t.doctype, h = t.docname, f = t.fieldname, p = t.otherData, o && i.append(\"is_private\", \"1\"), u && i.append(\"folder\", u), l && i.append(\"file_url\", l), a && h && (i.append(\"doctype\", a), i.append(\"docname\", h), f && i.append(\"fieldname\", f)), p && Object.keys(p).forEach(function(g) {\n          var b = p[g];\n          i.append(g, b);\n        }), [2, this.axios.post(\"/api/method/\".concat(s), i, {\n          onUploadProgress: function(g) {\n            r && r(g.loaded, g.total);\n          }\n        }).catch(function(g) {\n          var b, E;\n          throw Ft(Ft({}, g.response.data), { httpStatus: g.response.status, httpStatusText: g.response.statusText, message: (b = g.response.data.message) !== null && b !== void 0 ? b : \"There was an error while uploading the file.\", exception: (E = g.response.data.exception) !== null && E !== void 0 ? E : \"\" });\n        })];\n      });\n    });\n  }, n;\n}();\ndt.FrappeFileUpload = oi;\nvar Ke = {}, Gr = { exports: {} }, Fn = { exports: {} }, Xr = function(e, t) {\n  return function() {\n    for (var s = new Array(arguments.length), i = 0; i < s.length; i++)\n      s[i] = arguments[i];\n    return e.apply(t, s);\n  };\n}, ai = Xr, ke = Object.prototype.toString;\nfunction Un(n) {\n  return Array.isArray(n);\n}\nfunction En(n) {\n  return typeof n > \"u\";\n}\nfunction ui(n) {\n  return n !== null && !En(n) && n.constructor !== null && !En(n.constructor) && typeof n.constructor.isBuffer == \"function\" && n.constructor.isBuffer(n);\n}\nfunction Qr(n) {\n  return ke.call(n) === \"[object ArrayBuffer]\";\n}\nfunction ci(n) {\n  return ke.call(n) === \"[object FormData]\";\n}\nfunction li(n) {\n  var e;\n  return typeof ArrayBuffer < \"u\" && ArrayBuffer.isView ? e = ArrayBuffer.isView(n) : e = n && n.buffer && Qr(n.buffer), e;\n}\nfunction fi(n) {\n  return typeof n == \"string\";\n}\nfunction hi(n) {\n  return typeof n == \"number\";\n}\nfunction Zr(n) {\n  return n !== null && typeof n == \"object\";\n}\nfunction kt(n) {\n  if (ke.call(n) !== \"[object Object]\")\n    return !1;\n  var e = Object.getPrototypeOf(n);\n  return e === null || e === Object.prototype;\n}\nfunction di(n) {\n  return ke.call(n) === \"[object Date]\";\n}\nfunction pi(n) {\n  return ke.call(n) === \"[object File]\";\n}\nfunction vi(n) {\n  return ke.call(n) === \"[object Blob]\";\n}\nfunction es(n) {\n  return ke.call(n) === \"[object Function]\";\n}\nfunction yi(n) {\n  return Zr(n) && es(n.pipe);\n}\nfunction mi(n) {\n  return ke.call(n) === \"[object URLSearchParams]\";\n}\nfunction gi(n) {\n  return n.trim ? n.trim() : n.replace(/^\\s+|\\s+$/g, \"\");\n}\nfunction _i() {\n  return typeof navigator < \"u\" && (navigator.product === \"ReactNative\" || navigator.product === \"NativeScript\" || navigator.product === \"NS\") ? !1 : typeof window < \"u\" && typeof document < \"u\";\n}\nfunction qn(n, e) {\n  if (!(n === null || typeof n > \"u\"))\n    if (typeof n != \"object\" && (n = [n]), Un(n))\n      for (var t = 0, r = n.length; t < r; t++)\n        e.call(null, n[t], t, n);\n    else\n      for (var s in n)\n        Object.prototype.hasOwnProperty.call(n, s) && e.call(null, n[s], s, n);\n}\nfunction Rn() {\n  var n = {};\n  function e(s, i) {\n    kt(n[i]) && kt(s) ? n[i] = Rn(n[i], s) : kt(s) ? n[i] = Rn({}, s) : Un(s) ? n[i] = s.slice() : n[i] = s;\n  }\n  for (var t = 0, r = arguments.length; t < r; t++)\n    qn(arguments[t], e);\n  return n;\n}\nfunction bi(n, e, t) {\n  return qn(e, function(s, i) {\n    t && typeof s == \"function\" ? n[i] = ai(s, t) : n[i] = s;\n  }), n;\n}\nfunction wi(n) {\n  return n.charCodeAt(0) === 65279 && (n = n.slice(1)), n;\n}\nvar ae = {\n  isArray: Un,\n  isArrayBuffer: Qr,\n  isBuffer: ui,\n  isFormData: ci,\n  isArrayBufferView: li,\n  isString: fi,\n  isNumber: hi,\n  isObject: Zr,\n  isPlainObject: kt,\n  isUndefined: En,\n  isDate: di,\n  isFile: pi,\n  isBlob: vi,\n  isFunction: es,\n  isStream: yi,\n  isURLSearchParams: mi,\n  isStandardBrowserEnv: _i,\n  forEach: qn,\n  merge: Rn,\n  extend: bi,\n  trim: gi,\n  stripBOM: wi\n}, Ye = ae;\nfunction sr(n) {\n  return encodeURIComponent(n).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n}\nvar ts = function(e, t, r) {\n  if (!t)\n    return e;\n  var s;\n  if (r)\n    s = r(t);\n  else if (Ye.isURLSearchParams(t))\n    s = t.toString();\n  else {\n    var i = [];\n    Ye.forEach(t, function(l, a) {\n      l === null || typeof l > \"u\" || (Ye.isArray(l) ? a = a + \"[]\" : l = [l], Ye.forEach(l, function(f) {\n        Ye.isDate(f) ? f = f.toISOString() : Ye.isObject(f) && (f = JSON.stringify(f)), i.push(sr(a) + \"=\" + sr(f));\n      }));\n    }), s = i.join(\"&\");\n  }\n  if (s) {\n    var o = e.indexOf(\"#\");\n    o !== -1 && (e = e.slice(0, o)), e += (e.indexOf(\"?\") === -1 ? \"?\" : \"&\") + s;\n  }\n  return e;\n}, Ei = ae;\nfunction Ut() {\n  this.handlers = [];\n}\nUt.prototype.use = function(e, t, r) {\n  return this.handlers.push({\n    fulfilled: e,\n    rejected: t,\n    synchronous: r ? r.synchronous : !1,\n    runWhen: r ? r.runWhen : null\n  }), this.handlers.length - 1;\n};\nUt.prototype.eject = function(e) {\n  this.handlers[e] && (this.handlers[e] = null);\n};\nUt.prototype.forEach = function(e) {\n  Ei.forEach(this.handlers, function(r) {\n    r !== null && e(r);\n  });\n};\nvar Ri = Ut, Si = ae, Ti = function(e, t) {\n  Si.forEach(e, function(s, i) {\n    i !== t && i.toUpperCase() === t.toUpperCase() && (e[t] = s, delete e[i]);\n  });\n}, ns = function(e, t, r, s, i) {\n  return e.config = t, r && (e.code = r), e.request = s, e.response = i, e.isAxiosError = !0, e.toJSON = function() {\n    return {\n      message: this.message,\n      name: this.name,\n      description: this.description,\n      number: this.number,\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }, e;\n}, rs = {\n  silentJSONParsing: !0,\n  forcedJSONParsing: !0,\n  clarifyTimeoutError: !1\n}, Kt, ir;\nfunction ss() {\n  if (ir)\n    return Kt;\n  ir = 1;\n  var n = ns;\n  return Kt = function(t, r, s, i, o) {\n    var u = new Error(t);\n    return n(u, r, s, i, o);\n  }, Kt;\n}\nvar Gt, or;\nfunction Oi() {\n  if (or)\n    return Gt;\n  or = 1;\n  var n = ss();\n  return Gt = function(t, r, s) {\n    var i = s.config.validateStatus;\n    !s.status || !i || i(s.status) ? t(s) : r(n(\n      \"Request failed with status code \" + s.status,\n      s.config,\n      null,\n      s.request,\n      s\n    ));\n  }, Gt;\n}\nvar Xt, ar;\nfunction xi() {\n  if (ar)\n    return Xt;\n  ar = 1;\n  var n = ae;\n  return Xt = n.isStandardBrowserEnv() ? function() {\n    return {\n      write: function(r, s, i, o, u, l) {\n        var a = [];\n        a.push(r + \"=\" + encodeURIComponent(s)), n.isNumber(i) && a.push(\"expires=\" + new Date(i).toGMTString()), n.isString(o) && a.push(\"path=\" + o), n.isString(u) && a.push(\"domain=\" + u), l === !0 && a.push(\"secure\"), document.cookie = a.join(\"; \");\n      },\n      read: function(r) {\n        var s = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + r + \")=([^;]*)\"));\n        return s ? decodeURIComponent(s[3]) : null;\n      },\n      remove: function(r) {\n        this.write(r, \"\", Date.now() - 864e5);\n      }\n    };\n  }() : function() {\n    return {\n      write: function() {\n      },\n      read: function() {\n        return null;\n      },\n      remove: function() {\n      }\n    };\n  }(), Xt;\n}\nvar Qt, ur;\nfunction Ci() {\n  return ur || (ur = 1, Qt = function(e) {\n    return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(e);\n  }), Qt;\n}\nvar Zt, cr;\nfunction Ai() {\n  return cr || (cr = 1, Zt = function(e, t) {\n    return t ? e.replace(/\\/+$/, \"\") + \"/\" + t.replace(/^\\/+/, \"\") : e;\n  }), Zt;\n}\nvar en, lr;\nfunction Di() {\n  if (lr)\n    return en;\n  lr = 1;\n  var n = Ci(), e = Ai();\n  return en = function(r, s) {\n    return r && !n(s) ? e(r, s) : s;\n  }, en;\n}\nvar tn, fr;\nfunction ki() {\n  if (fr)\n    return tn;\n  fr = 1;\n  var n = ae, e = [\n    \"age\",\n    \"authorization\",\n    \"content-length\",\n    \"content-type\",\n    \"etag\",\n    \"expires\",\n    \"from\",\n    \"host\",\n    \"if-modified-since\",\n    \"if-unmodified-since\",\n    \"last-modified\",\n    \"location\",\n    \"max-forwards\",\n    \"proxy-authorization\",\n    \"referer\",\n    \"retry-after\",\n    \"user-agent\"\n  ];\n  return tn = function(r) {\n    var s = {}, i, o, u;\n    return r && n.forEach(r.split(`\n`), function(a) {\n      if (u = a.indexOf(\":\"), i = n.trim(a.substr(0, u)).toLowerCase(), o = n.trim(a.substr(u + 1)), i) {\n        if (s[i] && e.indexOf(i) >= 0)\n          return;\n        i === \"set-cookie\" ? s[i] = (s[i] ? s[i] : []).concat([o]) : s[i] = s[i] ? s[i] + \", \" + o : o;\n      }\n    }), s;\n  }, tn;\n}\nvar nn, hr;\nfunction Li() {\n  if (hr)\n    return nn;\n  hr = 1;\n  var n = ae;\n  return nn = n.isStandardBrowserEnv() ? function() {\n    var t = /(msie|trident)/i.test(navigator.userAgent), r = document.createElement(\"a\"), s;\n    function i(o) {\n      var u = o;\n      return t && (r.setAttribute(\"href\", u), u = r.href), r.setAttribute(\"href\", u), {\n        href: r.href,\n        protocol: r.protocol ? r.protocol.replace(/:$/, \"\") : \"\",\n        host: r.host,\n        search: r.search ? r.search.replace(/^\\?/, \"\") : \"\",\n        hash: r.hash ? r.hash.replace(/^#/, \"\") : \"\",\n        hostname: r.hostname,\n        port: r.port,\n        pathname: r.pathname.charAt(0) === \"/\" ? r.pathname : \"/\" + r.pathname\n      };\n    }\n    return s = i(window.location.href), function(u) {\n      var l = n.isString(u) ? i(u) : u;\n      return l.protocol === s.protocol && l.host === s.host;\n    };\n  }() : function() {\n    return function() {\n      return !0;\n    };\n  }(), nn;\n}\nvar rn, dr;\nfunction qt() {\n  if (dr)\n    return rn;\n  dr = 1;\n  function n(e) {\n    this.message = e;\n  }\n  return n.prototype.toString = function() {\n    return \"Cancel\" + (this.message ? \": \" + this.message : \"\");\n  }, n.prototype.__CANCEL__ = !0, rn = n, rn;\n}\nvar sn, pr;\nfunction vr() {\n  if (pr)\n    return sn;\n  pr = 1;\n  var n = ae, e = Oi(), t = xi(), r = ts, s = Di(), i = ki(), o = Li(), u = ss(), l = rs, a = qt();\n  return sn = function(f) {\n    return new Promise(function(m, g) {\n      var b = f.data, E = f.headers, _ = f.responseType, S;\n      function k() {\n        f.cancelToken && f.cancelToken.unsubscribe(S), f.signal && f.signal.removeEventListener(\"abort\", S);\n      }\n      n.isFormData(b) && delete E[\"Content-Type\"];\n      var y = new XMLHttpRequest();\n      if (f.auth) {\n        var M = f.auth.username || \"\", T = f.auth.password ? unescape(encodeURIComponent(f.auth.password)) : \"\";\n        E.Authorization = \"Basic \" + btoa(M + \":\" + T);\n      }\n      var V = s(f.baseURL, f.url);\n      y.open(f.method.toUpperCase(), r(V, f.params, f.paramsSerializer), !0), y.timeout = f.timeout;\n      function D() {\n        if (!!y) {\n          var L = \"getAllResponseHeaders\" in y ? i(y.getAllResponseHeaders()) : null, Q = !_ || _ === \"text\" || _ === \"json\" ? y.responseText : y.response, ne = {\n            data: Q,\n            status: y.status,\n            statusText: y.statusText,\n            headers: L,\n            config: f,\n            request: y\n          };\n          e(function(F) {\n            m(F), k();\n          }, function(F) {\n            g(F), k();\n          }, ne), y = null;\n        }\n      }\n      if (\"onloadend\" in y ? y.onloadend = D : y.onreadystatechange = function() {\n        !y || y.readyState !== 4 || y.status === 0 && !(y.responseURL && y.responseURL.indexOf(\"file:\") === 0) || setTimeout(D);\n      }, y.onabort = function() {\n        !y || (g(u(\"Request aborted\", f, \"ECONNABORTED\", y)), y = null);\n      }, y.onerror = function() {\n        g(u(\"Network Error\", f, null, y)), y = null;\n      }, y.ontimeout = function() {\n        var Q = f.timeout ? \"timeout of \" + f.timeout + \"ms exceeded\" : \"timeout exceeded\", ne = f.transitional || l;\n        f.timeoutErrorMessage && (Q = f.timeoutErrorMessage), g(u(\n          Q,\n          f,\n          ne.clarifyTimeoutError ? \"ETIMEDOUT\" : \"ECONNABORTED\",\n          y\n        )), y = null;\n      }, n.isStandardBrowserEnv()) {\n        var j = (f.withCredentials || o(V)) && f.xsrfCookieName ? t.read(f.xsrfCookieName) : void 0;\n        j && (E[f.xsrfHeaderName] = j);\n      }\n      \"setRequestHeader\" in y && n.forEach(E, function(Q, ne) {\n        typeof b > \"u\" && ne.toLowerCase() === \"content-type\" ? delete E[ne] : y.setRequestHeader(ne, Q);\n      }), n.isUndefined(f.withCredentials) || (y.withCredentials = !!f.withCredentials), _ && _ !== \"json\" && (y.responseType = f.responseType), typeof f.onDownloadProgress == \"function\" && y.addEventListener(\"progress\", f.onDownloadProgress), typeof f.onUploadProgress == \"function\" && y.upload && y.upload.addEventListener(\"progress\", f.onUploadProgress), (f.cancelToken || f.signal) && (S = function(L) {\n        !y || (g(!L || L && L.type ? new a(\"canceled\") : L), y.abort(), y = null);\n      }, f.cancelToken && f.cancelToken.subscribe(S), f.signal && (f.signal.aborted ? S() : f.signal.addEventListener(\"abort\", S))), b || (b = null), y.send(b);\n    });\n  }, sn;\n}\nvar Z = ae, yr = Ti, Ni = ns, Pi = rs, Bi = {\n  \"Content-Type\": \"application/x-www-form-urlencoded\"\n};\nfunction mr(n, e) {\n  !Z.isUndefined(n) && Z.isUndefined(n[\"Content-Type\"]) && (n[\"Content-Type\"] = e);\n}\nfunction Fi() {\n  var n;\n  return (typeof XMLHttpRequest < \"u\" || typeof process < \"u\" && Object.prototype.toString.call(process) === \"[object process]\") && (n = vr()), n;\n}\nfunction Ui(n, e, t) {\n  if (Z.isString(n))\n    try {\n      return (e || JSON.parse)(n), Z.trim(n);\n    } catch (r) {\n      if (r.name !== \"SyntaxError\")\n        throw r;\n    }\n  return (t || JSON.stringify)(n);\n}\nvar It = {\n  transitional: Pi,\n  adapter: Fi(),\n  transformRequest: [function(e, t) {\n    return yr(t, \"Accept\"), yr(t, \"Content-Type\"), Z.isFormData(e) || Z.isArrayBuffer(e) || Z.isBuffer(e) || Z.isStream(e) || Z.isFile(e) || Z.isBlob(e) ? e : Z.isArrayBufferView(e) ? e.buffer : Z.isURLSearchParams(e) ? (mr(t, \"application/x-www-form-urlencoded;charset=utf-8\"), e.toString()) : Z.isObject(e) || t && t[\"Content-Type\"] === \"application/json\" ? (mr(t, \"application/json\"), Ui(e)) : e;\n  }],\n  transformResponse: [function(e) {\n    var t = this.transitional || It.transitional, r = t && t.silentJSONParsing, s = t && t.forcedJSONParsing, i = !r && this.responseType === \"json\";\n    if (i || s && Z.isString(e) && e.length)\n      try {\n        return JSON.parse(e);\n      } catch (o) {\n        if (i)\n          throw o.name === \"SyntaxError\" ? Ni(o, this, \"E_JSON_PARSE\") : o;\n      }\n    return e;\n  }],\n  timeout: 0,\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\",\n  maxContentLength: -1,\n  maxBodyLength: -1,\n  validateStatus: function(e) {\n    return e >= 200 && e < 300;\n  },\n  headers: {\n    common: {\n      Accept: \"application/json, text/plain, */*\"\n    }\n  }\n};\nZ.forEach([\"delete\", \"get\", \"head\"], function(e) {\n  It.headers[e] = {};\n});\nZ.forEach([\"post\", \"put\", \"patch\"], function(e) {\n  It.headers[e] = Z.merge(Bi);\n});\nvar In = It, qi = ae, Ii = In, Vi = function(e, t, r) {\n  var s = this || Ii;\n  return qi.forEach(r, function(o) {\n    e = o.call(s, e, t);\n  }), e;\n}, on, gr;\nfunction is() {\n  return gr || (gr = 1, on = function(e) {\n    return !!(e && e.__CANCEL__);\n  }), on;\n}\nvar _r = ae, an = Vi, ji = is(), $i = In, Mi = qt();\nfunction un(n) {\n  if (n.cancelToken && n.cancelToken.throwIfRequested(), n.signal && n.signal.aborted)\n    throw new Mi(\"canceled\");\n}\nvar Wi = function(e) {\n  un(e), e.headers = e.headers || {}, e.data = an.call(\n    e,\n    e.data,\n    e.headers,\n    e.transformRequest\n  ), e.headers = _r.merge(\n    e.headers.common || {},\n    e.headers[e.method] || {},\n    e.headers\n  ), _r.forEach(\n    [\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\", \"common\"],\n    function(s) {\n      delete e.headers[s];\n    }\n  );\n  var t = e.adapter || $i.adapter;\n  return t(e).then(function(s) {\n    return un(e), s.data = an.call(\n      e,\n      s.data,\n      s.headers,\n      e.transformResponse\n    ), s;\n  }, function(s) {\n    return ji(s) || (un(e), s && s.response && (s.response.data = an.call(\n      e,\n      s.response.data,\n      s.response.headers,\n      e.transformResponse\n    ))), Promise.reject(s);\n  });\n}, ue = ae, os = function(e, t) {\n  t = t || {};\n  var r = {};\n  function s(h, f) {\n    return ue.isPlainObject(h) && ue.isPlainObject(f) ? ue.merge(h, f) : ue.isPlainObject(f) ? ue.merge({}, f) : ue.isArray(f) ? f.slice() : f;\n  }\n  function i(h) {\n    if (ue.isUndefined(t[h])) {\n      if (!ue.isUndefined(e[h]))\n        return s(void 0, e[h]);\n    } else\n      return s(e[h], t[h]);\n  }\n  function o(h) {\n    if (!ue.isUndefined(t[h]))\n      return s(void 0, t[h]);\n  }\n  function u(h) {\n    if (ue.isUndefined(t[h])) {\n      if (!ue.isUndefined(e[h]))\n        return s(void 0, e[h]);\n    } else\n      return s(void 0, t[h]);\n  }\n  function l(h) {\n    if (h in t)\n      return s(e[h], t[h]);\n    if (h in e)\n      return s(void 0, e[h]);\n  }\n  var a = {\n    url: o,\n    method: o,\n    data: o,\n    baseURL: u,\n    transformRequest: u,\n    transformResponse: u,\n    paramsSerializer: u,\n    timeout: u,\n    timeoutMessage: u,\n    withCredentials: u,\n    adapter: u,\n    responseType: u,\n    xsrfCookieName: u,\n    xsrfHeaderName: u,\n    onUploadProgress: u,\n    onDownloadProgress: u,\n    decompress: u,\n    maxContentLength: u,\n    maxBodyLength: u,\n    transport: u,\n    httpAgent: u,\n    httpsAgent: u,\n    cancelToken: u,\n    socketPath: u,\n    responseEncoding: u,\n    validateStatus: l\n  };\n  return ue.forEach(Object.keys(e).concat(Object.keys(t)), function(f) {\n    var p = a[f] || i, m = p(f);\n    ue.isUndefined(m) && p !== l || (r[f] = m);\n  }), r;\n}, cn, br;\nfunction as() {\n  return br || (br = 1, cn = {\n    version: \"0.26.1\"\n  }), cn;\n}\nvar Hi = as().version, Vn = {};\n[\"object\", \"boolean\", \"number\", \"function\", \"string\", \"symbol\"].forEach(function(n, e) {\n  Vn[n] = function(r) {\n    return typeof r === n || \"a\" + (e < 1 ? \"n \" : \" \") + n;\n  };\n});\nvar wr = {};\nVn.transitional = function(e, t, r) {\n  function s(i, o) {\n    return \"[Axios v\" + Hi + \"] Transitional option '\" + i + \"'\" + o + (r ? \". \" + r : \"\");\n  }\n  return function(i, o, u) {\n    if (e === !1)\n      throw new Error(s(o, \" has been removed\" + (t ? \" in \" + t : \"\")));\n    return t && !wr[o] && (wr[o] = !0, console.warn(\n      s(\n        o,\n        \" has been deprecated since v\" + t + \" and will be removed in the near future\"\n      )\n    )), e ? e(i, o, u) : !0;\n  };\n};\nfunction Ji(n, e, t) {\n  if (typeof n != \"object\")\n    throw new TypeError(\"options must be an object\");\n  for (var r = Object.keys(n), s = r.length; s-- > 0; ) {\n    var i = r[s], o = e[i];\n    if (o) {\n      var u = n[i], l = u === void 0 || o(u, i, n);\n      if (l !== !0)\n        throw new TypeError(\"option \" + i + \" must be \" + l);\n      continue;\n    }\n    if (t !== !0)\n      throw Error(\"Unknown option \" + i);\n  }\n}\nvar Yi = {\n  assertOptions: Ji,\n  validators: Vn\n}, us = ae, zi = ts, Er = Ri, Rr = Wi, Vt = os, cs = Yi, ze = cs.validators;\nfunction pt(n) {\n  this.defaults = n, this.interceptors = {\n    request: new Er(),\n    response: new Er()\n  };\n}\npt.prototype.request = function(e, t) {\n  typeof e == \"string\" ? (t = t || {}, t.url = e) : t = e || {}, t = Vt(this.defaults, t), t.method ? t.method = t.method.toLowerCase() : this.defaults.method ? t.method = this.defaults.method.toLowerCase() : t.method = \"get\";\n  var r = t.transitional;\n  r !== void 0 && cs.assertOptions(r, {\n    silentJSONParsing: ze.transitional(ze.boolean),\n    forcedJSONParsing: ze.transitional(ze.boolean),\n    clarifyTimeoutError: ze.transitional(ze.boolean)\n  }, !1);\n  var s = [], i = !0;\n  this.interceptors.request.forEach(function(m) {\n    typeof m.runWhen == \"function\" && m.runWhen(t) === !1 || (i = i && m.synchronous, s.unshift(m.fulfilled, m.rejected));\n  });\n  var o = [];\n  this.interceptors.response.forEach(function(m) {\n    o.push(m.fulfilled, m.rejected);\n  });\n  var u;\n  if (!i) {\n    var l = [Rr, void 0];\n    for (Array.prototype.unshift.apply(l, s), l = l.concat(o), u = Promise.resolve(t); l.length; )\n      u = u.then(l.shift(), l.shift());\n    return u;\n  }\n  for (var a = t; s.length; ) {\n    var h = s.shift(), f = s.shift();\n    try {\n      a = h(a);\n    } catch (p) {\n      f(p);\n      break;\n    }\n  }\n  try {\n    u = Rr(a);\n  } catch (p) {\n    return Promise.reject(p);\n  }\n  for (; o.length; )\n    u = u.then(o.shift(), o.shift());\n  return u;\n};\npt.prototype.getUri = function(e) {\n  return e = Vt(this.defaults, e), zi(e.url, e.params, e.paramsSerializer).replace(/^\\?/, \"\");\n};\nus.forEach([\"delete\", \"get\", \"head\", \"options\"], function(e) {\n  pt.prototype[e] = function(t, r) {\n    return this.request(Vt(r || {}, {\n      method: e,\n      url: t,\n      data: (r || {}).data\n    }));\n  };\n});\nus.forEach([\"post\", \"put\", \"patch\"], function(e) {\n  pt.prototype[e] = function(t, r, s) {\n    return this.request(Vt(s || {}, {\n      method: e,\n      url: t,\n      data: r\n    }));\n  };\n});\nvar Ki = pt, ln, Sr;\nfunction Gi() {\n  if (Sr)\n    return ln;\n  Sr = 1;\n  var n = qt();\n  function e(t) {\n    if (typeof t != \"function\")\n      throw new TypeError(\"executor must be a function.\");\n    var r;\n    this.promise = new Promise(function(o) {\n      r = o;\n    });\n    var s = this;\n    this.promise.then(function(i) {\n      if (!!s._listeners) {\n        var o, u = s._listeners.length;\n        for (o = 0; o < u; o++)\n          s._listeners[o](i);\n        s._listeners = null;\n      }\n    }), this.promise.then = function(i) {\n      var o, u = new Promise(function(l) {\n        s.subscribe(l), o = l;\n      }).then(i);\n      return u.cancel = function() {\n        s.unsubscribe(o);\n      }, u;\n    }, t(function(o) {\n      s.reason || (s.reason = new n(o), r(s.reason));\n    });\n  }\n  return e.prototype.throwIfRequested = function() {\n    if (this.reason)\n      throw this.reason;\n  }, e.prototype.subscribe = function(r) {\n    if (this.reason) {\n      r(this.reason);\n      return;\n    }\n    this._listeners ? this._listeners.push(r) : this._listeners = [r];\n  }, e.prototype.unsubscribe = function(r) {\n    if (!!this._listeners) {\n      var s = this._listeners.indexOf(r);\n      s !== -1 && this._listeners.splice(s, 1);\n    }\n  }, e.source = function() {\n    var r, s = new e(function(o) {\n      r = o;\n    });\n    return {\n      token: s,\n      cancel: r\n    };\n  }, ln = e, ln;\n}\nvar fn, Tr;\nfunction Xi() {\n  return Tr || (Tr = 1, fn = function(e) {\n    return function(r) {\n      return e.apply(null, r);\n    };\n  }), fn;\n}\nvar hn, Or;\nfunction Qi() {\n  if (Or)\n    return hn;\n  Or = 1;\n  var n = ae;\n  return hn = function(t) {\n    return n.isObject(t) && t.isAxiosError === !0;\n  }, hn;\n}\nvar xr = ae, Zi = Xr, Lt = Ki, eo = os, to = In;\nfunction ls(n) {\n  var e = new Lt(n), t = Zi(Lt.prototype.request, e);\n  return xr.extend(t, Lt.prototype, e), xr.extend(t, e), t.create = function(s) {\n    return ls(eo(n, s));\n  }, t;\n}\nvar _e = ls(to);\n_e.Axios = Lt;\n_e.Cancel = qt();\n_e.CancelToken = Gi();\n_e.isCancel = is();\n_e.VERSION = as().version;\n_e.all = function(e) {\n  return Promise.all(e);\n};\n_e.spread = Xi();\n_e.isAxiosError = Qi();\nFn.exports = _e;\nFn.exports.default = _e;\n(function(n) {\n  n.exports = Fn.exports;\n})(Gr);\nObject.defineProperty(Ke, \"__esModule\", { value: !0 });\nKe.getRequestHeaders = Ke.getAxiosClient = void 0;\nvar no = Gr.exports;\nfunction ro(n, e, t, r) {\n  return no.default.create({\n    baseURL: n,\n    headers: fs(e, r, t),\n    withCredentials: !0\n  });\n}\nKe.getAxiosClient = ro;\nfunction fs(n, e, t) {\n  n === void 0 && (n = !1);\n  var r = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n  return n && e && t && (r.Authorization = \"\".concat(e, \" \").concat(t())), typeof window < \"u\" && typeof document < \"u\" && (window.location && (r[\"X-Frappe-Site-Name\"] = window.location.hostname), window.csrf_token && window.csrf_token !== \"{{ csrf_token }}\" && (r[\"X-Frappe-CSRF-Token\"] = window.csrf_token)), r;\n}\nKe.getRequestHeaders = fs;\nvar Cr;\nfunction so() {\n  if (Cr)\n    return rt;\n  Cr = 1, Object.defineProperty(rt, \"__esModule\", { value: !0 }), rt.FrappeApp = void 0;\n  var n = hs(), e = ft, t = ht, r = dt, s = Ke, i = function() {\n    function o(u, l, a) {\n      var h, f;\n      this.url = u, this.name = a != null ? a : \"FrappeApp\", this.useToken = (h = l == null ? void 0 : l.useToken) !== null && h !== void 0 ? h : !1, this.token = l == null ? void 0 : l.token, this.tokenType = (f = l == null ? void 0 : l.type) !== null && f !== void 0 ? f : \"Bearer\", this.axios = (0, s.getAxiosClient)(this.url, this.useToken, this.token, this.tokenType);\n    }\n    return o.prototype.auth = function() {\n      return new n.FrappeAuth(this.url, this.axios, this.useToken, this.token, this.tokenType);\n    }, o.prototype.db = function() {\n      return new t.FrappeDB(this.url, this.axios, this.useToken, this.token, this.tokenType);\n    }, o.prototype.file = function() {\n      return new r.FrappeFileUpload(this.url, this.axios, this.useToken, this.token, this.tokenType);\n    }, o.prototype.call = function() {\n      return new e.FrappeCall(this.url, this.axios, this.useToken, this.token, this.tokenType);\n    }, o;\n  }();\n  return rt.FrappeApp = i, rt;\n}\nvar jt = {}, ye = B && B.__assign || function() {\n  return ye = Object.assign || function(n) {\n    for (var e, t = 1, r = arguments.length; t < r; t++) {\n      e = arguments[t];\n      for (var s in e)\n        Object.prototype.hasOwnProperty.call(e, s) && (n[s] = e[s]);\n    }\n    return n;\n  }, ye.apply(this, arguments);\n}, Rt = B && B.__awaiter || function(n, e, t, r) {\n  function s(i) {\n    return i instanceof t ? i : new t(function(o) {\n      o(i);\n    });\n  }\n  return new (t || (t = Promise))(function(i, o) {\n    function u(h) {\n      try {\n        a(r.next(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function l(h) {\n      try {\n        a(r.throw(h));\n      } catch (f) {\n        o(f);\n      }\n    }\n    function a(h) {\n      h.done ? i(h.value) : s(h.value).then(u, l);\n    }\n    a((r = r.apply(n, e || [])).next());\n  });\n}, St = B && B.__generator || function(n, e) {\n  var t = { label: 0, sent: function() {\n    if (i[0] & 1)\n      throw i[1];\n    return i[1];\n  }, trys: [], ops: [] }, r, s, i, o;\n  return o = { next: u(0), throw: u(1), return: u(2) }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n    return this;\n  }), o;\n  function u(a) {\n    return function(h) {\n      return l([a, h]);\n    };\n  }\n  function l(a) {\n    if (r)\n      throw new TypeError(\"Generator is already executing.\");\n    for (; t; )\n      try {\n        if (r = 1, s && (i = a[0] & 2 ? s.return : a[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, a[1])).done)\n          return i;\n        switch (s = 0, i && (a = [a[0] & 2, i.value]), a[0]) {\n          case 0:\n          case 1:\n            i = a;\n            break;\n          case 4:\n            return t.label++, { value: a[1], done: !1 };\n          case 5:\n            t.label++, s = a[1], a = [0];\n            continue;\n          case 7:\n            a = t.ops.pop(), t.trys.pop();\n            continue;\n          default:\n            if (i = t.trys, !(i = i.length > 0 && i[i.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n              t = 0;\n              continue;\n            }\n            if (a[0] === 3 && (!i || a[1] > i[0] && a[1] < i[3])) {\n              t.label = a[1];\n              break;\n            }\n            if (a[0] === 6 && t.label < i[1]) {\n              t.label = i[1], i = a;\n              break;\n            }\n            if (i && t.label < i[2]) {\n              t.label = i[2], t.ops.push(a);\n              break;\n            }\n            i[2] && t.ops.pop(), t.trys.pop();\n            continue;\n        }\n        a = e.call(n, t);\n      } catch (h) {\n        a = [6, h], s = 0;\n      } finally {\n        r = i = 0;\n      }\n    if (a[0] & 5)\n      throw a[1];\n    return { value: a[0] ? a[1] : void 0, done: !0 };\n  }\n};\nObject.defineProperty(jt, \"__esModule\", { value: !0 });\njt.FrappeAuth = void 0;\nvar io = function() {\n  function n(e, t, r, s, i) {\n    this.appURL = e, this.axios = t, this.useToken = r != null ? r : !1, this.token = s, this.tokenType = i;\n  }\n  return n.prototype.loginWithUsernamePassword = function(e) {\n    return Rt(this, void 0, void 0, function() {\n      var t, r, s;\n      return St(this, function(i) {\n        return t = e.username, r = e.password, s = e.device, [2, this.axios.post(\"/api/method/login\", {\n          usr: t,\n          pwd: r,\n          device: s\n        }).then(function(o) {\n          return o.data;\n        }).catch(function(o) {\n          var u, l;\n          throw ye(ye({}, o.response.data), { httpStatus: o.response.status, httpStatusText: o.response.statusText, message: (u = o.response.data.message) !== null && u !== void 0 ? u : \"There was an error while logging in\", exception: (l = o.response.data.exception) !== null && l !== void 0 ? l : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.getLoggedInUser = function() {\n    return Rt(this, void 0, void 0, function() {\n      return St(this, function(e) {\n        return [2, this.axios.get(\"/api/method/frappe.auth.get_logged_user\").then(function(t) {\n          return t.data.message;\n        }).catch(function(t) {\n          var r;\n          throw ye(ye({}, t.response.data), { httpStatus: t.response.status, httpStatusText: t.response.statusText, message: \"There was an error while fetching the logged in user\", exception: (r = t.response.data.exception) !== null && r !== void 0 ? r : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.logout = function() {\n    return Rt(this, void 0, void 0, function() {\n      return St(this, function(e) {\n        return [2, this.axios.post(\"/api/method/logout\", {}).then(function() {\n        }).catch(function(t) {\n          var r, s;\n          throw ye(ye({}, t.response.data), { httpStatus: t.response.status, httpStatusText: t.response.statusText, message: (r = t.response.data.message) !== null && r !== void 0 ? r : \"There was an error while logging out\", exception: (s = t.response.data.exception) !== null && s !== void 0 ? s : \"\" });\n        })];\n      });\n    });\n  }, n.prototype.forgetPassword = function(e) {\n    return Rt(this, void 0, void 0, function() {\n      return St(this, function(t) {\n        return [2, this.axios.post(\"/\", {\n          cmd: \"frappe.core.doctype.user.user.reset_password\",\n          user: e\n        }).then(function() {\n        }).catch(function(r) {\n          var s, i;\n          throw ye(ye({}, r.response.data), { httpStatus: r.response.status, httpStatusText: r.response.statusText, message: (s = r.response.data.message) !== null && s !== void 0 ? s : \"There was an error sending password reset email.\", exception: (i = r.response.data.exception) !== null && i !== void 0 ? i : \"\" });\n        })];\n      });\n    });\n  }, n;\n}();\njt.FrappeAuth = io;\nvar Ar;\nfunction hs() {\n  return Ar || (Ar = 1, function(n) {\n    var e = B && B.__createBinding || (Object.create ? function(r, s, i, o) {\n      o === void 0 && (o = i);\n      var u = Object.getOwnPropertyDescriptor(s, i);\n      (!u || (\"get\" in u ? !s.__esModule : u.writable || u.configurable)) && (u = { enumerable: !0, get: function() {\n        return s[i];\n      } }), Object.defineProperty(r, o, u);\n    } : function(r, s, i, o) {\n      o === void 0 && (o = i), r[o] = s[i];\n    }), t = B && B.__exportStar || function(r, s) {\n      for (var i in r)\n        i !== \"default\" && !Object.prototype.hasOwnProperty.call(s, i) && e(s, r, i);\n    };\n    Object.defineProperty(n, \"__esModule\", { value: !0 }), t(so(), n), t(jt, n), t(ht, n), t(dt, n), t(ft, n);\n  }(zt)), zt;\n}\nvar oo = hs(), ds = { exports: {} }, dn = {};\n/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Dr;\nfunction ao() {\n  if (Dr)\n    return dn;\n  Dr = 1;\n  var n = (react__WEBPACK_IMPORTED_MODULE_0___default());\n  function e(f, p) {\n    return f === p && (f !== 0 || 1 / f === 1 / p) || f !== f && p !== p;\n  }\n  var t = typeof Object.is == \"function\" ? Object.is : e, r = n.useState, s = n.useEffect, i = n.useLayoutEffect, o = n.useDebugValue;\n  function u(f, p) {\n    var m = p(), g = r({ inst: { value: m, getSnapshot: p } }), b = g[0].inst, E = g[1];\n    return i(function() {\n      b.value = m, b.getSnapshot = p, l(b) && E({ inst: b });\n    }, [f, m, p]), s(function() {\n      return l(b) && E({ inst: b }), f(function() {\n        l(b) && E({ inst: b });\n      });\n    }, [f]), o(m), m;\n  }\n  function l(f) {\n    var p = f.getSnapshot;\n    f = f.value;\n    try {\n      var m = p();\n      return !t(f, m);\n    } catch {\n      return !0;\n    }\n  }\n  function a(f, p) {\n    return p();\n  }\n  var h = typeof window > \"u\" || typeof window.document > \"u\" || typeof window.document.createElement > \"u\" ? a : u;\n  return dn.useSyncExternalStore = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : h, dn;\n}\nvar pn = {};\n/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar kr;\nfunction uo() {\n  return kr || (kr = 1,  true && function() {\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < \"u\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == \"function\" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    var n = (react__WEBPACK_IMPORTED_MODULE_0___default()), e = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function t(k) {\n      {\n        for (var y = arguments.length, M = new Array(y > 1 ? y - 1 : 0), T = 1; T < y; T++)\n          M[T - 1] = arguments[T];\n        r(\"error\", k, M);\n      }\n    }\n    function r(k, y, M) {\n      {\n        var T = e.ReactDebugCurrentFrame, V = T.getStackAddendum();\n        V !== \"\" && (y += \"%s\", M = M.concat([V]));\n        var D = M.map(function(j) {\n          return String(j);\n        });\n        D.unshift(\"Warning: \" + y), Function.prototype.apply.call(console[k], console, D);\n      }\n    }\n    function s(k, y) {\n      return k === y && (k !== 0 || 1 / k === 1 / y) || k !== k && y !== y;\n    }\n    var i = typeof Object.is == \"function\" ? Object.is : s, o = n.useState, u = n.useEffect, l = n.useLayoutEffect, a = n.useDebugValue, h = !1, f = !1;\n    function p(k, y, M) {\n      h || n.startTransition !== void 0 && (h = !0, t(\"You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.\"));\n      var T = y();\n      if (!f) {\n        var V = y();\n        i(T, V) || (t(\"The result of getSnapshot should be cached to avoid an infinite loop\"), f = !0);\n      }\n      var D = o({\n        inst: {\n          value: T,\n          getSnapshot: y\n        }\n      }), j = D[0].inst, L = D[1];\n      return l(function() {\n        j.value = T, j.getSnapshot = y, m(j) && L({\n          inst: j\n        });\n      }, [k, T, y]), u(function() {\n        m(j) && L({\n          inst: j\n        });\n        var Q = function() {\n          m(j) && L({\n            inst: j\n          });\n        };\n        return k(Q);\n      }, [k]), a(T), T;\n    }\n    function m(k) {\n      var y = k.getSnapshot, M = k.value;\n      try {\n        var T = y();\n        return !i(M, T);\n      } catch {\n        return !0;\n      }\n    }\n    function g(k, y, M) {\n      return y();\n    }\n    var b = typeof window < \"u\" && typeof window.document < \"u\" && typeof window.document.createElement < \"u\", E = !b, _ = E ? g : p, S = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : _;\n    pn.useSyncExternalStore = S, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < \"u\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == \"function\" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n  }()), pn;\n}\n(function(n) {\n   false ? 0 : n.exports = uo();\n})(ds);\nconst Ae = () => {\n}, oe = Ae(), vn = Object, C = (n) => n === oe, Oe = (n) => typeof n == \"function\", De = (n, e) => ({\n  ...n,\n  ...e\n}), co = (n) => Oe(n.then), Tt = /* @__PURE__ */ new WeakMap();\nlet lo = 0;\nconst ct = (n) => {\n  const e = typeof n, t = n && n.constructor, r = t == Date;\n  let s, i;\n  if (vn(n) === n && !r && t != RegExp) {\n    if (s = Tt.get(n), s)\n      return s;\n    if (s = ++lo + \"~\", Tt.set(n, s), t == Array) {\n      for (s = \"@\", i = 0; i < n.length; i++)\n        s += ct(n[i]) + \",\";\n      Tt.set(n, s);\n    }\n    if (t == vn) {\n      s = \"#\";\n      const o = vn.keys(n).sort();\n      for (; !C(i = o.pop()); )\n        C(n[i]) || (s += i + \":\" + ct(n[i]) + \",\");\n      Tt.set(n, s);\n    }\n  } else\n    s = r ? n.toJSON() : e == \"symbol\" ? n.toString() : e == \"string\" ? JSON.stringify(n) : \"\" + n;\n  return s;\n}, Te = /* @__PURE__ */ new WeakMap(), yn = {}, Ot = {}, jn = \"undefined\", $t = typeof window != jn, Sn = typeof document != jn, fo = () => $t && typeof window.requestAnimationFrame != jn, ps = (n, e) => {\n  const t = Te.get(n);\n  return [\n    () => !C(e) && n.get(e) || yn,\n    (r) => {\n      if (!C(e)) {\n        const s = n.get(e);\n        e in Ot || (Ot[e] = s), t[5](e, De(s, r), s || yn);\n      }\n    },\n    t[6],\n    () => !C(e) && e in Ot ? Ot[e] : !C(e) && n.get(e) || yn\n  ];\n};\nlet Tn = !0;\nconst ho = () => Tn, [On, xn] = $t && window.addEventListener ? [\n  window.addEventListener.bind(window),\n  window.removeEventListener.bind(window)\n] : [\n  Ae,\n  Ae\n], po = () => {\n  const n = Sn && document.visibilityState;\n  return C(n) || n !== \"hidden\";\n}, vo = (n) => (Sn && document.addEventListener(\"visibilitychange\", n), On(\"focus\", n), () => {\n  Sn && document.removeEventListener(\"visibilitychange\", n), xn(\"focus\", n);\n}), yo = (n) => {\n  const e = () => {\n    Tn = !0, n();\n  }, t = () => {\n    Tn = !1;\n  };\n  return On(\"online\", e), On(\"offline\", t), () => {\n    xn(\"online\", e), xn(\"offline\", t);\n  };\n}, mo = {\n  isOnline: ho,\n  isVisible: po\n}, go = {\n  initFocus: vo,\n  initReconnect: yo\n}, Lr = !(react__WEBPACK_IMPORTED_MODULE_0___default().useId), lt = !$t || \"Deno\" in window, _o = (n) => fo() ? window.requestAnimationFrame(n) : setTimeout(n, 1), mn = lt ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect, gn = typeof navigator < \"u\" && navigator.connection, Nr = !lt && gn && ([\n  \"slow-2g\",\n  \"2g\"\n].includes(gn.effectiveType) || gn.saveData), $n = (n) => {\n  if (Oe(n))\n    try {\n      n = n();\n    } catch {\n      n = \"\";\n    }\n  const e = n;\n  return n = typeof n == \"string\" ? n : (Array.isArray(n) ? n.length : n) ? ct(n) : \"\", [\n    n,\n    e\n  ];\n};\nlet bo = 0;\nconst Cn = () => ++bo, vs = 0, ys = 1, ms = 2, wo = 3;\nvar st = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: wo,\n  FOCUS_EVENT: vs,\n  MUTATE_EVENT: ms,\n  RECONNECT_EVENT: ys\n};\nasync function gs(...n) {\n  const [e, t, r, s] = n, i = De({\n    populateCache: !0,\n    throwOnError: !0\n  }, typeof s == \"boolean\" ? {\n    revalidate: s\n  } : s || {});\n  let o = i.populateCache;\n  const u = i.rollbackOnError;\n  let l = i.optimisticData;\n  const a = i.revalidate !== !1, h = (m) => typeof u == \"function\" ? u(m) : u !== !1, f = i.throwOnError;\n  if (Oe(t)) {\n    const m = t, g = [], b = e.keys();\n    for (const E of b)\n      !/^\\$(inf|sub)\\$/.test(E) && m(e.get(E)._k) && g.push(E);\n    return Promise.all(g.map(p));\n  }\n  return p(t);\n  async function p(m) {\n    const [g] = $n(m);\n    if (!g)\n      return;\n    const [b, E] = ps(e, g), [_, S, k, y] = Te.get(e), M = () => {\n      const F = _[g];\n      return a && (delete k[g], delete y[g], F && F[0]) ? F[0](ms).then(() => b().data) : b().data;\n    };\n    if (n.length < 3)\n      return M();\n    let T = r, V;\n    const D = Cn();\n    S[g] = [\n      D,\n      0\n    ];\n    const j = !C(l), L = b(), Q = L.data, ne = L._c, G = C(ne) ? Q : ne;\n    if (j && (l = Oe(l) ? l(G, Q) : l, E({\n      data: l,\n      _c: G\n    })), Oe(T))\n      try {\n        T = T(G);\n      } catch (F) {\n        V = F;\n      }\n    if (T && co(T))\n      if (T = await T.catch((F) => {\n        V = F;\n      }), D !== S[g][0]) {\n        if (V)\n          throw V;\n        return T;\n      } else\n        V && j && h(V) && (o = !0, E({\n          data: G,\n          _c: oe\n        }));\n    if (o && !V)\n      if (Oe(o)) {\n        const F = o(T, G);\n        E({\n          data: F,\n          error: oe,\n          _c: oe\n        });\n      } else\n        E({\n          data: T,\n          error: oe,\n          _c: oe\n        });\n    if (S[g][1] = Cn(), Promise.resolve(M()).then(() => {\n      E({\n        _c: oe\n      });\n    }), V) {\n      if (f)\n        throw V;\n      return;\n    }\n    return T;\n  }\n}\nconst Pr = (n, e) => {\n  for (const t in n)\n    n[t][0] && n[t][0](e);\n}, Eo = (n, e) => {\n  if (!Te.has(n)) {\n    const t = De(go, e), r = {}, s = gs.bind(oe, n);\n    let i = Ae;\n    const o = {}, u = (h, f) => {\n      const p = o[h] || [];\n      return o[h] = p, p.push(f), () => p.splice(p.indexOf(f), 1);\n    }, l = (h, f, p) => {\n      n.set(h, f);\n      const m = o[h];\n      if (m)\n        for (const g of m)\n          g(f, p);\n    }, a = () => {\n      if (!Te.has(n) && (Te.set(n, [\n        r,\n        {},\n        {},\n        {},\n        s,\n        l,\n        u\n      ]), !lt)) {\n        const h = t.initFocus(setTimeout.bind(oe, Pr.bind(oe, r, vs))), f = t.initReconnect(setTimeout.bind(oe, Pr.bind(oe, r, ys)));\n        i = () => {\n          h && h(), f && f(), Te.delete(n);\n        };\n      }\n    };\n    return a(), [\n      n,\n      s,\n      a,\n      i\n    ];\n  }\n  return [\n    n,\n    Te.get(n)[4]\n  ];\n}, Ro = (n, e, t, r, s) => {\n  const i = t.errorRetryCount, o = s.retryCount, u = ~~((Math.random() + 0.5) * (1 << (o < 8 ? o : 8))) * t.errorRetryInterval;\n  !C(i) && o > i || setTimeout(r, u, s);\n}, So = (n, e) => ct(n) == ct(e), [_s, To] = Eo(/* @__PURE__ */ new Map()), Oo = De(\n  {\n    onLoadingSlow: Ae,\n    onSuccess: Ae,\n    onError: Ae,\n    onErrorRetry: Ro,\n    onDiscarded: Ae,\n    revalidateOnFocus: !0,\n    revalidateOnReconnect: !0,\n    revalidateIfStale: !0,\n    shouldRetryOnError: !0,\n    errorRetryInterval: Nr ? 1e4 : 5e3,\n    focusThrottleInterval: 5 * 1e3,\n    dedupingInterval: 2 * 1e3,\n    loadingTimeout: Nr ? 5e3 : 3e3,\n    compare: So,\n    isPaused: () => !1,\n    cache: _s,\n    mutate: To,\n    fallback: {}\n  },\n  mo\n), xo = (n, e) => {\n  const t = De(n, e);\n  if (e) {\n    const { use: r, fallback: s } = n, { use: i, fallback: o } = e;\n    r && i && (t.use = r.concat(i)), s && o && (t.fallback = De(s, o));\n  }\n  return t;\n}, Co = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), Ao = \"$inf$\", bs = $t && window.__SWR_DEVTOOLS_USE__, Do = bs ? window.__SWR_DEVTOOLS_USE__ : [], ko = () => {\n  bs && (window.__SWR_DEVTOOLS_REACT__ = (react__WEBPACK_IMPORTED_MODULE_0___default()));\n}, Lo = (n) => Oe(n[1]) ? [\n  n[0],\n  n[1],\n  n[2] || {}\n] : [\n  n[0],\n  null,\n  (n[1] === null ? n[2] : n[1]) || {}\n], No = () => De(Oo, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Co)), Po = (n) => (e, t, r) => n(e, t && ((...i) => {\n  const [o] = $n(e), [, , , u] = Te.get(_s);\n  if (o.startsWith(Ao))\n    return t(...i);\n  const l = u[o];\n  return C(l) ? t(...i) : (delete u[o], l);\n}), r), Bo = Do.concat(Po), Fo = (n) => function(...t) {\n  const r = No(), [s, i, o] = Lo(t), u = xo(r, o);\n  let l = n;\n  const { use: a } = u, h = (a || []).concat(Bo);\n  for (let f = h.length; f--; )\n    l = h[f](l);\n  return l(s, i || u.fetcher || null, u);\n}, Uo = (n, e, t) => {\n  const r = e[n] || (e[n] = []);\n  return r.push(t), () => {\n    const s = r.indexOf(t);\n    s >= 0 && (r[s] = r[r.length - 1], r.pop());\n  };\n};\nko();\nconst Br = (react__WEBPACK_IMPORTED_MODULE_0___default().use) || ((n) => {\n  if (n.status === \"pending\")\n    throw n;\n  if (n.status === \"fulfilled\")\n    return n.value;\n  throw n.status === \"rejected\" ? n.reason : (n.status = \"pending\", n.then((e) => {\n    n.status = \"fulfilled\", n.value = e;\n  }, (e) => {\n    n.status = \"rejected\", n.reason = e;\n  }), n);\n}), _n = {\n  dedupe: !0\n}, qo = (n, e, t) => {\n  const { cache: r, compare: s, suspense: i, fallbackData: o, revalidateOnMount: u, revalidateIfStale: l, refreshInterval: a, refreshWhenHidden: h, refreshWhenOffline: f, keepPreviousData: p } = t, [m, g, b, E] = Te.get(r), [_, S] = $n(n), k = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), M = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(_), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e), V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t), D = () => V.current, j = () => D().isVisible() && D().isOnline(), [L, Q, ne, G] = ps(r, _), F = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({}).current, Le = C(o) ? t.fallback[_] : o, Qe = (N, U) => {\n    for (const X in F) {\n      const I = X;\n      if (I === \"data\") {\n        if (!s(N[I], U[I]) && (!C(N[I]) || !s(Ie, U[I])))\n          return !1;\n      } else if (U[I] !== N[I])\n        return !1;\n    }\n    return !0;\n  }, Ze = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const N = (() => !_ || !e ? !1 : C(u) ? D().isPaused() || i ? !1 : C(l) ? !0 : l : u)(), U = (J) => {\n      const de = De(J);\n      return delete de._k, N ? {\n        isValidating: !0,\n        isLoading: !0,\n        ...de\n      } : de;\n    }, X = L(), I = G(), re = U(X), Re = X === I ? re : U(I);\n    let H = re;\n    return [\n      () => {\n        const J = U(L());\n        return Qe(J, H) ? (H.data = J.data, H.isLoading = J.isLoading, H.isValidating = J.isValidating, H.error = J.error, H) : (H = J, J);\n      },\n      () => Re\n    ];\n  }, [\n    r,\n    _\n  ]), be = ds.exports.useSyncExternalStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (N) => ne(_, (U, X) => {\n      Qe(X, U) || N();\n    }),\n    [\n      r,\n      _\n    ]\n  ), Ze[0], Ze[1]), et = !k.current, yt = m[_] && m[_].length > 0, we = be.data, Ee = C(we) ? Le : we, Ne = be.error, mt = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Ee), Ie = p ? C(we) ? mt.current : we : Ee, Ve = (() => yt && !C(Ne) ? !1 : et && !C(u) ? u : D().isPaused() ? !1 : i ? C(Ee) ? !1 : l : C(Ee) || l)(), je = !!(_ && e && et && Ve), $e = C(be.isValidating) ? je : be.isValidating, tt = C(be.isLoading) ? je : be.isLoading, ve = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (N) => {\n      const U = T.current;\n      if (!_ || !U || y.current || D().isPaused())\n        return !1;\n      let X, I, re = !0;\n      const Re = N || {}, H = !b[_] || !Re.dedupe, J = () => Lr ? !y.current && _ === M.current && k.current : _ === M.current, de = {\n        isValidating: !1,\n        isLoading: !1\n      }, _t = () => {\n        Q(de);\n      }, Me = () => {\n        const ie = b[_];\n        ie && ie[1] === I && delete b[_];\n      }, bt = {\n        isValidating: !0\n      };\n      C(L().data) && (bt.isLoading = !0);\n      try {\n        if (H && (Q(bt), t.loadingTimeout && C(L().data) && setTimeout(() => {\n          re && J() && D().onLoadingSlow(_, t);\n        }, t.loadingTimeout), b[_] = [\n          U(S),\n          Cn()\n        ]), [X, I] = b[_], X = await X, H && setTimeout(Me, t.dedupingInterval), !b[_] || b[_][1] !== I)\n          return H && J() && D().onDiscarded(_), !1;\n        de.error = oe;\n        const ie = g[_];\n        if (!C(ie) && (I <= ie[0] || I <= ie[1] || ie[1] === 0))\n          return _t(), H && J() && D().onDiscarded(_), !1;\n        const ce = L().data;\n        de.data = s(ce, X) ? ce : X, H && J() && D().onSuccess(X, _, t);\n      } catch (ie) {\n        Me();\n        const ce = D(), { shouldRetryOnError: We } = ce;\n        ce.isPaused() || (de.error = ie, H && J() && (ce.onError(ie, _, ce), (We === !0 || Oe(We) && We(ie)) && j() && ce.onErrorRetry(ie, _, ce, (Pe) => {\n          const nt = m[_];\n          nt && nt[0] && nt[0](st.ERROR_REVALIDATE_EVENT, Pe);\n        }, {\n          retryCount: (Re.retryCount || 0) + 1,\n          dedupe: !0\n        })));\n      }\n      return re = !1, _t(), !0;\n    },\n    [\n      _,\n      r\n    ]\n  ), gt = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (...N) => gs(r, M.current, ...N),\n    []\n  );\n  if (mn(() => {\n    T.current = e, V.current = t, C(we) || (mt.current = we);\n  }), mn(() => {\n    if (!_)\n      return;\n    const N = ve.bind(oe, _n);\n    let U = 0;\n    const I = Uo(_, m, (re, Re = {}) => {\n      if (re == st.FOCUS_EVENT) {\n        const H = Date.now();\n        D().revalidateOnFocus && H > U && j() && (U = H + D().focusThrottleInterval, N());\n      } else if (re == st.RECONNECT_EVENT)\n        D().revalidateOnReconnect && j() && N();\n      else {\n        if (re == st.MUTATE_EVENT)\n          return ve();\n        if (re == st.ERROR_REVALIDATE_EVENT)\n          return ve(Re);\n      }\n    });\n    return y.current = !1, M.current = _, k.current = !0, Q({\n      _k: S\n    }), Ve && (C(Ee) || lt ? N() : _o(N)), () => {\n      y.current = !0, I();\n    };\n  }, [\n    _\n  ]), mn(() => {\n    let N;\n    function U() {\n      const I = Oe(a) ? a(L().data) : a;\n      I && N !== -1 && (N = setTimeout(X, I));\n    }\n    function X() {\n      !L().error && (h || D().isVisible()) && (f || D().isOnline()) ? ve(_n).then(U) : U();\n    }\n    return U(), () => {\n      N && (clearTimeout(N), N = -1);\n    };\n  }, [\n    a,\n    h,\n    f,\n    _\n  ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(Ie), i && C(Ee) && _) {\n    if (!Lr && lt)\n      throw new Error(\"Fallback data is required when using suspense in SSR.\");\n    T.current = e, V.current = t, y.current = !1;\n    const N = E[_];\n    if (!C(N)) {\n      const U = gt(N);\n      Br(U);\n    }\n    if (C(Ne)) {\n      const U = ve(_n);\n      C(Ie) || (U.status = \"fulfilled\", U.value = !0), Br(U);\n    } else\n      throw Ne;\n  }\n  return {\n    mutate: gt,\n    get data() {\n      return F.data = !0, Ie;\n    },\n    get error() {\n      return F.error = !0, Ne;\n    },\n    get isValidating() {\n      return F.isValidating = !0, $e;\n    },\n    get isLoading() {\n      return F.isLoading = !0, tt;\n    }\n  };\n}, vt = Fo(qo), ge = /* @__PURE__ */ Object.create(null);\nge.open = \"0\";\nge.close = \"1\";\nge.ping = \"2\";\nge.pong = \"3\";\nge.message = \"4\";\nge.upgrade = \"5\";\nge.noop = \"6\";\nconst Nt = /* @__PURE__ */ Object.create(null);\nObject.keys(ge).forEach((n) => {\n  Nt[ge[n]] = n;\n});\nconst An = { type: \"error\", data: \"parser error\" }, ws = typeof Blob == \"function\" || typeof Blob < \"u\" && Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\", Es = typeof ArrayBuffer == \"function\", Rs = (n) => typeof ArrayBuffer.isView == \"function\" ? ArrayBuffer.isView(n) : n && n.buffer instanceof ArrayBuffer, Mn = ({ type: n, data: e }, t, r) => ws && e instanceof Blob ? t ? r(e) : Fr(e, r) : Es && (e instanceof ArrayBuffer || Rs(e)) ? t ? r(e) : Fr(new Blob([e]), r) : r(ge[n] + (e || \"\")), Fr = (n, e) => {\n  const t = new FileReader();\n  return t.onload = function() {\n    const r = t.result.split(\",\")[1];\n    e(\"b\" + (r || \"\"));\n  }, t.readAsDataURL(n);\n};\nfunction Ur(n) {\n  return n instanceof Uint8Array ? n : n instanceof ArrayBuffer ? new Uint8Array(n) : new Uint8Array(n.buffer, n.byteOffset, n.byteLength);\n}\nlet bn;\nfunction Io(n, e) {\n  if (ws && n.data instanceof Blob)\n    return n.data.arrayBuffer().then(Ur).then(e);\n  if (Es && (n.data instanceof ArrayBuffer || Rs(n.data)))\n    return e(Ur(n.data));\n  Mn(n, !1, (t) => {\n    bn || (bn = new TextEncoder()), e(bn.encode(t));\n  });\n}\nconst qr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", ut = typeof Uint8Array > \"u\" ? [] : new Uint8Array(256);\nfor (let n = 0; n < qr.length; n++)\n  ut[qr.charCodeAt(n)] = n;\nconst Vo = (n) => {\n  let e = n.length * 0.75, t = n.length, r, s = 0, i, o, u, l;\n  n[n.length - 1] === \"=\" && (e--, n[n.length - 2] === \"=\" && e--);\n  const a = new ArrayBuffer(e), h = new Uint8Array(a);\n  for (r = 0; r < t; r += 4)\n    i = ut[n.charCodeAt(r)], o = ut[n.charCodeAt(r + 1)], u = ut[n.charCodeAt(r + 2)], l = ut[n.charCodeAt(r + 3)], h[s++] = i << 2 | o >> 4, h[s++] = (o & 15) << 4 | u >> 2, h[s++] = (u & 3) << 6 | l & 63;\n  return a;\n}, jo = typeof ArrayBuffer == \"function\", Wn = (n, e) => {\n  if (typeof n != \"string\")\n    return {\n      type: \"message\",\n      data: Ss(n, e)\n    };\n  const t = n.charAt(0);\n  return t === \"b\" ? {\n    type: \"message\",\n    data: $o(n.substring(1), e)\n  } : Nt[t] ? n.length > 1 ? {\n    type: Nt[t],\n    data: n.substring(1)\n  } : {\n    type: Nt[t]\n  } : An;\n}, $o = (n, e) => {\n  if (jo) {\n    const t = Vo(n);\n    return Ss(t, e);\n  } else\n    return { base64: !0, data: n };\n}, Ss = (n, e) => {\n  switch (e) {\n    case \"blob\":\n      return n instanceof Blob ? n : new Blob([n]);\n    case \"arraybuffer\":\n    default:\n      return n instanceof ArrayBuffer ? n : n.buffer;\n  }\n}, Ts = String.fromCharCode(30), Mo = (n, e) => {\n  const t = n.length, r = new Array(t);\n  let s = 0;\n  n.forEach((i, o) => {\n    Mn(i, !1, (u) => {\n      r[o] = u, ++s === t && e(r.join(Ts));\n    });\n  });\n}, Wo = (n, e) => {\n  const t = n.split(Ts), r = [];\n  for (let s = 0; s < t.length; s++) {\n    const i = Wn(t[s], e);\n    if (r.push(i), i.type === \"error\")\n      break;\n  }\n  return r;\n};\nfunction Ho() {\n  return new TransformStream({\n    transform(n, e) {\n      Io(n, (t) => {\n        const r = t.length;\n        let s;\n        if (r < 126)\n          s = new Uint8Array(1), new DataView(s.buffer).setUint8(0, r);\n        else if (r < 65536) {\n          s = new Uint8Array(3);\n          const i = new DataView(s.buffer);\n          i.setUint8(0, 126), i.setUint16(1, r);\n        } else {\n          s = new Uint8Array(9);\n          const i = new DataView(s.buffer);\n          i.setUint8(0, 127), i.setBigUint64(1, BigInt(r));\n        }\n        n.data && typeof n.data != \"string\" && (s[0] |= 128), e.enqueue(s), e.enqueue(t);\n      });\n    }\n  });\n}\nlet wn;\nfunction xt(n) {\n  return n.reduce((e, t) => e + t.length, 0);\n}\nfunction Ct(n, e) {\n  if (n[0].length === e)\n    return n.shift();\n  const t = new Uint8Array(e);\n  let r = 0;\n  for (let s = 0; s < e; s++)\n    t[s] = n[0][r++], r === n[0].length && (n.shift(), r = 0);\n  return n.length && r < n[0].length && (n[0] = n[0].slice(r)), t;\n}\nfunction Jo(n, e) {\n  wn || (wn = new TextDecoder());\n  const t = [];\n  let r = 0, s = -1, i = !1;\n  return new TransformStream({\n    transform(o, u) {\n      for (t.push(o); ; ) {\n        if (r === 0) {\n          if (xt(t) < 1)\n            break;\n          const l = Ct(t, 1);\n          i = (l[0] & 128) === 128, s = l[0] & 127, s < 126 ? r = 3 : s === 126 ? r = 1 : r = 2;\n        } else if (r === 1) {\n          if (xt(t) < 2)\n            break;\n          const l = Ct(t, 2);\n          s = new DataView(l.buffer, l.byteOffset, l.length).getUint16(0), r = 3;\n        } else if (r === 2) {\n          if (xt(t) < 8)\n            break;\n          const l = Ct(t, 8), a = new DataView(l.buffer, l.byteOffset, l.length), h = a.getUint32(0);\n          if (h > Math.pow(2, 53 - 32) - 1) {\n            u.enqueue(An);\n            break;\n          }\n          s = h * Math.pow(2, 32) + a.getUint32(4), r = 3;\n        } else {\n          if (xt(t) < s)\n            break;\n          const l = Ct(t, s);\n          u.enqueue(Wn(i ? l : wn.decode(l), e)), r = 0;\n        }\n        if (s === 0 || s > n) {\n          u.enqueue(An);\n          break;\n        }\n      }\n    }\n  });\n}\nconst Os = 4;\nfunction K(n) {\n  if (n)\n    return Yo(n);\n}\nfunction Yo(n) {\n  for (var e in K.prototype)\n    n[e] = K.prototype[e];\n  return n;\n}\nK.prototype.on = K.prototype.addEventListener = function(n, e) {\n  return this._callbacks = this._callbacks || {}, (this._callbacks[\"$\" + n] = this._callbacks[\"$\" + n] || []).push(e), this;\n};\nK.prototype.once = function(n, e) {\n  function t() {\n    this.off(n, t), e.apply(this, arguments);\n  }\n  return t.fn = e, this.on(n, t), this;\n};\nK.prototype.off = K.prototype.removeListener = K.prototype.removeAllListeners = K.prototype.removeEventListener = function(n, e) {\n  if (this._callbacks = this._callbacks || {}, arguments.length == 0)\n    return this._callbacks = {}, this;\n  var t = this._callbacks[\"$\" + n];\n  if (!t)\n    return this;\n  if (arguments.length == 1)\n    return delete this._callbacks[\"$\" + n], this;\n  for (var r, s = 0; s < t.length; s++)\n    if (r = t[s], r === e || r.fn === e) {\n      t.splice(s, 1);\n      break;\n    }\n  return t.length === 0 && delete this._callbacks[\"$\" + n], this;\n};\nK.prototype.emit = function(n) {\n  this._callbacks = this._callbacks || {};\n  for (var e = new Array(arguments.length - 1), t = this._callbacks[\"$\" + n], r = 1; r < arguments.length; r++)\n    e[r - 1] = arguments[r];\n  if (t) {\n    t = t.slice(0);\n    for (var r = 0, s = t.length; r < s; ++r)\n      t[r].apply(this, e);\n  }\n  return this;\n};\nK.prototype.emitReserved = K.prototype.emit;\nK.prototype.listeners = function(n) {\n  return this._callbacks = this._callbacks || {}, this._callbacks[\"$\" + n] || [];\n};\nK.prototype.hasListeners = function(n) {\n  return !!this.listeners(n).length;\n};\nconst he = (() => typeof self < \"u\" ? self : typeof window < \"u\" ? window : Function(\"return this\")())();\nfunction xs(n, ...e) {\n  return e.reduce((t, r) => (n.hasOwnProperty(r) && (t[r] = n[r]), t), {});\n}\nconst zo = he.setTimeout, Ko = he.clearTimeout;\nfunction Mt(n, e) {\n  e.useNativeTimers ? (n.setTimeoutFn = zo.bind(he), n.clearTimeoutFn = Ko.bind(he)) : (n.setTimeoutFn = he.setTimeout.bind(he), n.clearTimeoutFn = he.clearTimeout.bind(he));\n}\nconst Go = 1.33;\nfunction Xo(n) {\n  return typeof n == \"string\" ? Qo(n) : Math.ceil((n.byteLength || n.size) * Go);\n}\nfunction Qo(n) {\n  let e = 0, t = 0;\n  for (let r = 0, s = n.length; r < s; r++)\n    e = n.charCodeAt(r), e < 128 ? t += 1 : e < 2048 ? t += 2 : e < 55296 || e >= 57344 ? t += 3 : (r++, t += 4);\n  return t;\n}\nfunction Zo(n) {\n  let e = \"\";\n  for (let t in n)\n    n.hasOwnProperty(t) && (e.length && (e += \"&\"), e += encodeURIComponent(t) + \"=\" + encodeURIComponent(n[t]));\n  return e;\n}\nfunction ea(n) {\n  let e = {}, t = n.split(\"&\");\n  for (let r = 0, s = t.length; r < s; r++) {\n    let i = t[r].split(\"=\");\n    e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);\n  }\n  return e;\n}\nclass ta extends Error {\n  constructor(e, t, r) {\n    super(e), this.description = t, this.context = r, this.type = \"TransportError\";\n  }\n}\nclass Hn extends K {\n  constructor(e) {\n    super(), this.writable = !1, Mt(this, e), this.opts = e, this.query = e.query, this.socket = e.socket;\n  }\n  onError(e, t, r) {\n    return super.emitReserved(\"error\", new ta(e, t, r)), this;\n  }\n  open() {\n    return this.readyState = \"opening\", this.doOpen(), this;\n  }\n  close() {\n    return (this.readyState === \"opening\" || this.readyState === \"open\") && (this.doClose(), this.onClose()), this;\n  }\n  send(e) {\n    this.readyState === \"open\" && this.write(e);\n  }\n  onOpen() {\n    this.readyState = \"open\", this.writable = !0, super.emitReserved(\"open\");\n  }\n  onData(e) {\n    const t = Wn(e, this.socket.binaryType);\n    this.onPacket(t);\n  }\n  onPacket(e) {\n    super.emitReserved(\"packet\", e);\n  }\n  onClose(e) {\n    this.readyState = \"closed\", super.emitReserved(\"close\", e);\n  }\n  pause(e) {\n  }\n  createUri(e, t = {}) {\n    return e + \"://\" + this._hostname() + this._port() + this.opts.path + this._query(t);\n  }\n  _hostname() {\n    const e = this.opts.hostname;\n    return e.indexOf(\":\") === -1 ? e : \"[\" + e + \"]\";\n  }\n  _port() {\n    return this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80) ? \":\" + this.opts.port : \"\";\n  }\n  _query(e) {\n    const t = Zo(e);\n    return t.length ? \"?\" + t : \"\";\n  }\n}\nconst Cs = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"), Dn = 64, na = {};\nlet Ir = 0, At = 0, Vr;\nfunction jr(n) {\n  let e = \"\";\n  do\n    e = Cs[n % Dn] + e, n = Math.floor(n / Dn);\n  while (n > 0);\n  return e;\n}\nfunction As() {\n  const n = jr(+new Date());\n  return n !== Vr ? (Ir = 0, Vr = n) : n + \".\" + jr(Ir++);\n}\nfor (; At < Dn; At++)\n  na[Cs[At]] = At;\nlet Ds = !1;\ntry {\n  Ds = typeof XMLHttpRequest < \"u\" && \"withCredentials\" in new XMLHttpRequest();\n} catch {\n}\nconst ra = Ds;\nfunction ks(n) {\n  const e = n.xdomain;\n  try {\n    if (typeof XMLHttpRequest < \"u\" && (!e || ra))\n      return new XMLHttpRequest();\n  } catch {\n  }\n  if (!e)\n    try {\n      return new he[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n    } catch {\n    }\n}\nfunction sa() {\n}\nconst ia = function() {\n  return new ks({\n    xdomain: !1\n  }).responseType != null;\n}();\nclass oa extends Hn {\n  constructor(e) {\n    if (super(e), this.polling = !1, typeof location < \"u\") {\n      const r = location.protocol === \"https:\";\n      let s = location.port;\n      s || (s = r ? \"443\" : \"80\"), this.xd = typeof location < \"u\" && e.hostname !== location.hostname || s !== e.port;\n    }\n    const t = e && e.forceBase64;\n    this.supportsBinary = ia && !t, this.opts.withCredentials && (this.cookieJar = void 0);\n  }\n  get name() {\n    return \"polling\";\n  }\n  doOpen() {\n    this.poll();\n  }\n  pause(e) {\n    this.readyState = \"pausing\";\n    const t = () => {\n      this.readyState = \"paused\", e();\n    };\n    if (this.polling || !this.writable) {\n      let r = 0;\n      this.polling && (r++, this.once(\"pollComplete\", function() {\n        --r || t();\n      })), this.writable || (r++, this.once(\"drain\", function() {\n        --r || t();\n      }));\n    } else\n      t();\n  }\n  poll() {\n    this.polling = !0, this.doPoll(), this.emitReserved(\"poll\");\n  }\n  onData(e) {\n    const t = (r) => {\n      if (this.readyState === \"opening\" && r.type === \"open\" && this.onOpen(), r.type === \"close\")\n        return this.onClose({ description: \"transport closed by the server\" }), !1;\n      this.onPacket(r);\n    };\n    Wo(e, this.socket.binaryType).forEach(t), this.readyState !== \"closed\" && (this.polling = !1, this.emitReserved(\"pollComplete\"), this.readyState === \"open\" && this.poll());\n  }\n  doClose() {\n    const e = () => {\n      this.write([{ type: \"close\" }]);\n    };\n    this.readyState === \"open\" ? e() : this.once(\"open\", e);\n  }\n  write(e) {\n    this.writable = !1, Mo(e, (t) => {\n      this.doWrite(t, () => {\n        this.writable = !0, this.emitReserved(\"drain\");\n      });\n    });\n  }\n  uri() {\n    const e = this.opts.secure ? \"https\" : \"http\", t = this.query || {};\n    return this.opts.timestampRequests !== !1 && (t[this.opts.timestampParam] = As()), !this.supportsBinary && !t.sid && (t.b64 = 1), this.createUri(e, t);\n  }\n  request(e = {}) {\n    return Object.assign(e, { xd: this.xd, cookieJar: this.cookieJar }, this.opts), new me(this.uri(), e);\n  }\n  doWrite(e, t) {\n    const r = this.request({\n      method: \"POST\",\n      data: e\n    });\n    r.on(\"success\", t), r.on(\"error\", (s, i) => {\n      this.onError(\"xhr post error\", s, i);\n    });\n  }\n  doPoll() {\n    const e = this.request();\n    e.on(\"data\", this.onData.bind(this)), e.on(\"error\", (t, r) => {\n      this.onError(\"xhr poll error\", t, r);\n    }), this.pollXhr = e;\n  }\n}\nclass me extends K {\n  constructor(e, t) {\n    super(), Mt(this, t), this.opts = t, this.method = t.method || \"GET\", this.uri = e, this.data = t.data !== void 0 ? t.data : null, this.create();\n  }\n  create() {\n    var e;\n    const t = xs(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    t.xdomain = !!this.opts.xd;\n    const r = this.xhr = new ks(t);\n    try {\n      r.open(this.method, this.uri, !0);\n      try {\n        if (this.opts.extraHeaders) {\n          r.setDisableHeaderCheck && r.setDisableHeaderCheck(!0);\n          for (let s in this.opts.extraHeaders)\n            this.opts.extraHeaders.hasOwnProperty(s) && r.setRequestHeader(s, this.opts.extraHeaders[s]);\n        }\n      } catch {\n      }\n      if (this.method === \"POST\")\n        try {\n          r.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch {\n        }\n      try {\n        r.setRequestHeader(\"Accept\", \"*/*\");\n      } catch {\n      }\n      (e = this.opts.cookieJar) === null || e === void 0 || e.addCookies(r), \"withCredentials\" in r && (r.withCredentials = this.opts.withCredentials), this.opts.requestTimeout && (r.timeout = this.opts.requestTimeout), r.onreadystatechange = () => {\n        var s;\n        r.readyState === 3 && ((s = this.opts.cookieJar) === null || s === void 0 || s.parseCookies(r)), r.readyState === 4 && (r.status === 200 || r.status === 1223 ? this.onLoad() : this.setTimeoutFn(() => {\n          this.onError(typeof r.status == \"number\" ? r.status : 0);\n        }, 0));\n      }, r.send(this.data);\n    } catch (s) {\n      this.setTimeoutFn(() => {\n        this.onError(s);\n      }, 0);\n      return;\n    }\n    typeof document < \"u\" && (this.index = me.requestsCount++, me.requests[this.index] = this);\n  }\n  onError(e) {\n    this.emitReserved(\"error\", e, this.xhr), this.cleanup(!0);\n  }\n  cleanup(e) {\n    if (!(typeof this.xhr > \"u\" || this.xhr === null)) {\n      if (this.xhr.onreadystatechange = sa, e)\n        try {\n          this.xhr.abort();\n        } catch {\n        }\n      typeof document < \"u\" && delete me.requests[this.index], this.xhr = null;\n    }\n  }\n  onLoad() {\n    const e = this.xhr.responseText;\n    e !== null && (this.emitReserved(\"data\", e), this.emitReserved(\"success\"), this.cleanup());\n  }\n  abort() {\n    this.cleanup();\n  }\n}\nme.requestsCount = 0;\nme.requests = {};\nif (typeof document < \"u\") {\n  if (typeof attachEvent == \"function\")\n    attachEvent(\"onunload\", $r);\n  else if (typeof addEventListener == \"function\") {\n    const n = \"onpagehide\" in he ? \"pagehide\" : \"unload\";\n    addEventListener(n, $r, !1);\n  }\n}\nfunction $r() {\n  for (let n in me.requests)\n    me.requests.hasOwnProperty(n) && me.requests[n].abort();\n}\nconst Jn = (() => typeof Promise == \"function\" && typeof Promise.resolve == \"function\" ? (e) => Promise.resolve().then(e) : (e, t) => t(e, 0))(), Dt = he.WebSocket || he.MozWebSocket, Mr = !0, aa = \"arraybuffer\", Wr = typeof navigator < \"u\" && typeof navigator.product == \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nclass ua extends Hn {\n  constructor(e) {\n    super(e), this.supportsBinary = !e.forceBase64;\n  }\n  get name() {\n    return \"websocket\";\n  }\n  doOpen() {\n    if (!this.check())\n      return;\n    const e = this.uri(), t = this.opts.protocols, r = Wr ? {} : xs(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n    this.opts.extraHeaders && (r.headers = this.opts.extraHeaders);\n    try {\n      this.ws = Mr && !Wr ? t ? new Dt(e, t) : new Dt(e) : new Dt(e, t, r);\n    } catch (s) {\n      return this.emitReserved(\"error\", s);\n    }\n    this.ws.binaryType = this.socket.binaryType, this.addEventListeners();\n  }\n  addEventListeners() {\n    this.ws.onopen = () => {\n      this.opts.autoUnref && this.ws._socket.unref(), this.onOpen();\n    }, this.ws.onclose = (e) => this.onClose({\n      description: \"websocket connection closed\",\n      context: e\n    }), this.ws.onmessage = (e) => this.onData(e.data), this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n  }\n  write(e) {\n    this.writable = !1;\n    for (let t = 0; t < e.length; t++) {\n      const r = e[t], s = t === e.length - 1;\n      Mn(r, this.supportsBinary, (i) => {\n        const o = {};\n        try {\n          Mr && this.ws.send(i);\n        } catch {\n        }\n        s && Jn(() => {\n          this.writable = !0, this.emitReserved(\"drain\");\n        }, this.setTimeoutFn);\n      });\n    }\n  }\n  doClose() {\n    typeof this.ws < \"u\" && (this.ws.close(), this.ws = null);\n  }\n  uri() {\n    const e = this.opts.secure ? \"wss\" : \"ws\", t = this.query || {};\n    return this.opts.timestampRequests && (t[this.opts.timestampParam] = As()), this.supportsBinary || (t.b64 = 1), this.createUri(e, t);\n  }\n  check() {\n    return !!Dt;\n  }\n}\nclass ca extends Hn {\n  get name() {\n    return \"webtransport\";\n  }\n  doOpen() {\n    typeof WebTransport == \"function\" && (this.transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]), this.transport.closed.then(() => {\n      this.onClose();\n    }).catch((e) => {\n      this.onError(\"webtransport error\", e);\n    }), this.transport.ready.then(() => {\n      this.transport.createBidirectionalStream().then((e) => {\n        const t = Jo(Number.MAX_SAFE_INTEGER, this.socket.binaryType), r = e.readable.pipeThrough(t).getReader(), s = Ho();\n        s.readable.pipeTo(e.writable), this.writer = s.writable.getWriter();\n        const i = () => {\n          r.read().then(({ done: u, value: l }) => {\n            u || (this.onPacket(l), i());\n          }).catch((u) => {\n          });\n        };\n        i();\n        const o = { type: \"open\" };\n        this.query.sid && (o.data = `{\"sid\":\"${this.query.sid}\"}`), this.writer.write(o).then(() => this.onOpen());\n      });\n    }));\n  }\n  write(e) {\n    this.writable = !1;\n    for (let t = 0; t < e.length; t++) {\n      const r = e[t], s = t === e.length - 1;\n      this.writer.write(r).then(() => {\n        s && Jn(() => {\n          this.writable = !0, this.emitReserved(\"drain\");\n        }, this.setTimeoutFn);\n      });\n    }\n  }\n  doClose() {\n    var e;\n    (e = this.transport) === null || e === void 0 || e.close();\n  }\n}\nconst la = {\n  websocket: ua,\n  webtransport: ca,\n  polling: oa\n}, fa = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/, ha = [\n  \"source\",\n  \"protocol\",\n  \"authority\",\n  \"userInfo\",\n  \"user\",\n  \"password\",\n  \"host\",\n  \"port\",\n  \"relative\",\n  \"path\",\n  \"directory\",\n  \"file\",\n  \"query\",\n  \"anchor\"\n];\nfunction kn(n) {\n  const e = n, t = n.indexOf(\"[\"), r = n.indexOf(\"]\");\n  t != -1 && r != -1 && (n = n.substring(0, t) + n.substring(t, r).replace(/:/g, \";\") + n.substring(r, n.length));\n  let s = fa.exec(n || \"\"), i = {}, o = 14;\n  for (; o--; )\n    i[ha[o]] = s[o] || \"\";\n  return t != -1 && r != -1 && (i.source = e, i.host = i.host.substring(1, i.host.length - 1).replace(/;/g, \":\"), i.authority = i.authority.replace(\"[\", \"\").replace(\"]\", \"\").replace(/;/g, \":\"), i.ipv6uri = !0), i.pathNames = da(i, i.path), i.queryKey = pa(i, i.query), i;\n}\nfunction da(n, e) {\n  const t = /\\/{2,9}/g, r = e.replace(t, \"/\").split(\"/\");\n  return (e.slice(0, 1) == \"/\" || e.length === 0) && r.splice(0, 1), e.slice(-1) == \"/\" && r.splice(r.length - 1, 1), r;\n}\nfunction pa(n, e) {\n  const t = {};\n  return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function(r, s, i) {\n    s && (t[s] = i);\n  }), t;\n}\nclass Ce extends K {\n  constructor(e, t = {}) {\n    super(), this.binaryType = aa, this.writeBuffer = [], e && typeof e == \"object\" && (t = e, e = null), e ? (e = kn(e), t.hostname = e.host, t.secure = e.protocol === \"https\" || e.protocol === \"wss\", t.port = e.port, e.query && (t.query = e.query)) : t.host && (t.hostname = kn(t.host).host), Mt(this, t), this.secure = t.secure != null ? t.secure : typeof location < \"u\" && location.protocol === \"https:\", t.hostname && !t.port && (t.port = this.secure ? \"443\" : \"80\"), this.hostname = t.hostname || (typeof location < \"u\" ? location.hostname : \"localhost\"), this.port = t.port || (typeof location < \"u\" && location.port ? location.port : this.secure ? \"443\" : \"80\"), this.transports = t.transports || [\n      \"polling\",\n      \"websocket\",\n      \"webtransport\"\n    ], this.writeBuffer = [], this.prevBufferLen = 0, this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: !1,\n      withCredentials: !1,\n      upgrade: !0,\n      timestampParam: \"t\",\n      rememberUpgrade: !1,\n      addTrailingSlash: !0,\n      rejectUnauthorized: !0,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: !1\n    }, t), this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\"), typeof this.opts.query == \"string\" && (this.opts.query = ea(this.opts.query)), this.id = null, this.upgrades = null, this.pingInterval = null, this.pingTimeout = null, this.pingTimeoutTimer = null, typeof addEventListener == \"function\" && (this.opts.closeOnBeforeunload && (this.beforeunloadEventListener = () => {\n      this.transport && (this.transport.removeAllListeners(), this.transport.close());\n    }, addEventListener(\"beforeunload\", this.beforeunloadEventListener, !1)), this.hostname !== \"localhost\" && (this.offlineEventListener = () => {\n      this.onClose(\"transport close\", {\n        description: \"network connection lost\"\n      });\n    }, addEventListener(\"offline\", this.offlineEventListener, !1))), this.open();\n  }\n  createTransport(e) {\n    const t = Object.assign({}, this.opts.query);\n    t.EIO = Os, t.transport = e, this.id && (t.sid = this.id);\n    const r = Object.assign({}, this.opts, {\n      query: t,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    }, this.opts.transportOptions[e]);\n    return new la[e](r);\n  }\n  open() {\n    let e;\n    if (this.opts.rememberUpgrade && Ce.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1)\n      e = \"websocket\";\n    else if (this.transports.length === 0) {\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else\n      e = this.transports[0];\n    this.readyState = \"opening\";\n    try {\n      e = this.createTransport(e);\n    } catch {\n      this.transports.shift(), this.open();\n      return;\n    }\n    e.open(), this.setTransport(e);\n  }\n  setTransport(e) {\n    this.transport && this.transport.removeAllListeners(), this.transport = e, e.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", (t) => this.onClose(\"transport close\", t));\n  }\n  probe(e) {\n    let t = this.createTransport(e), r = !1;\n    Ce.priorWebsocketSuccess = !1;\n    const s = () => {\n      r || (t.send([{ type: \"ping\", data: \"probe\" }]), t.once(\"packet\", (f) => {\n        if (!r)\n          if (f.type === \"pong\" && f.data === \"probe\") {\n            if (this.upgrading = !0, this.emitReserved(\"upgrading\", t), !t)\n              return;\n            Ce.priorWebsocketSuccess = t.name === \"websocket\", this.transport.pause(() => {\n              r || this.readyState !== \"closed\" && (h(), this.setTransport(t), t.send([{ type: \"upgrade\" }]), this.emitReserved(\"upgrade\", t), t = null, this.upgrading = !1, this.flush());\n            });\n          } else {\n            const p = new Error(\"probe error\");\n            p.transport = t.name, this.emitReserved(\"upgradeError\", p);\n          }\n      }));\n    };\n    function i() {\n      r || (r = !0, h(), t.close(), t = null);\n    }\n    const o = (f) => {\n      const p = new Error(\"probe error: \" + f);\n      p.transport = t.name, i(), this.emitReserved(\"upgradeError\", p);\n    };\n    function u() {\n      o(\"transport closed\");\n    }\n    function l() {\n      o(\"socket closed\");\n    }\n    function a(f) {\n      t && f.name !== t.name && i();\n    }\n    const h = () => {\n      t.removeListener(\"open\", s), t.removeListener(\"error\", o), t.removeListener(\"close\", u), this.off(\"close\", l), this.off(\"upgrading\", a);\n    };\n    t.once(\"open\", s), t.once(\"error\", o), t.once(\"close\", u), this.once(\"close\", l), this.once(\"upgrading\", a), this.upgrades.indexOf(\"webtransport\") !== -1 && e !== \"webtransport\" ? this.setTimeoutFn(() => {\n      r || t.open();\n    }, 200) : t.open();\n  }\n  onOpen() {\n    if (this.readyState = \"open\", Ce.priorWebsocketSuccess = this.transport.name === \"websocket\", this.emitReserved(\"open\"), this.flush(), this.readyState === \"open\" && this.opts.upgrade) {\n      let e = 0;\n      const t = this.upgrades.length;\n      for (; e < t; e++)\n        this.probe(this.upgrades[e]);\n    }\n  }\n  onPacket(e) {\n    if (this.readyState === \"opening\" || this.readyState === \"open\" || this.readyState === \"closing\")\n      switch (this.emitReserved(\"packet\", e), this.emitReserved(\"heartbeat\"), this.resetPingTimeout(), e.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(e.data));\n          break;\n        case \"ping\":\n          this.sendPacket(\"pong\"), this.emitReserved(\"ping\"), this.emitReserved(\"pong\");\n          break;\n        case \"error\":\n          const t = new Error(\"server error\");\n          t.code = e.data, this.onError(t);\n          break;\n        case \"message\":\n          this.emitReserved(\"data\", e.data), this.emitReserved(\"message\", e.data);\n          break;\n      }\n  }\n  onHandshake(e) {\n    this.emitReserved(\"handshake\", e), this.id = e.sid, this.transport.query.sid = e.sid, this.upgrades = this.filterUpgrades(e.upgrades), this.pingInterval = e.pingInterval, this.pingTimeout = e.pingTimeout, this.maxPayload = e.maxPayload, this.onOpen(), this.readyState !== \"closed\" && this.resetPingTimeout();\n  }\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer), this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout), this.opts.autoUnref && this.pingTimeoutTimer.unref();\n  }\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, this.writeBuffer.length === 0 ? this.emitReserved(\"drain\") : this.flush();\n  }\n  flush() {\n    if (this.readyState !== \"closed\" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const e = this.getWritablePackets();\n      this.transport.send(e), this.prevBufferLen = e.length, this.emitReserved(\"flush\");\n    }\n  }\n  getWritablePackets() {\n    if (!(this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1))\n      return this.writeBuffer;\n    let t = 1;\n    for (let r = 0; r < this.writeBuffer.length; r++) {\n      const s = this.writeBuffer[r].data;\n      if (s && (t += Xo(s)), r > 0 && t > this.maxPayload)\n        return this.writeBuffer.slice(0, r);\n      t += 2;\n    }\n    return this.writeBuffer;\n  }\n  write(e, t, r) {\n    return this.sendPacket(\"message\", e, t, r), this;\n  }\n  send(e, t, r) {\n    return this.sendPacket(\"message\", e, t, r), this;\n  }\n  sendPacket(e, t, r, s) {\n    if (typeof t == \"function\" && (s = t, t = void 0), typeof r == \"function\" && (s = r, r = null), this.readyState === \"closing\" || this.readyState === \"closed\")\n      return;\n    r = r || {}, r.compress = r.compress !== !1;\n    const i = {\n      type: e,\n      data: t,\n      options: r\n    };\n    this.emitReserved(\"packetCreate\", i), this.writeBuffer.push(i), s && this.once(\"flush\", s), this.flush();\n  }\n  close() {\n    const e = () => {\n      this.onClose(\"forced close\"), this.transport.close();\n    }, t = () => {\n      this.off(\"upgrade\", t), this.off(\"upgradeError\", t), e();\n    }, r = () => {\n      this.once(\"upgrade\", t), this.once(\"upgradeError\", t);\n    };\n    return (this.readyState === \"opening\" || this.readyState === \"open\") && (this.readyState = \"closing\", this.writeBuffer.length ? this.once(\"drain\", () => {\n      this.upgrading ? r() : e();\n    }) : this.upgrading ? r() : e()), this;\n  }\n  onError(e) {\n    Ce.priorWebsocketSuccess = !1, this.emitReserved(\"error\", e), this.onClose(\"transport error\", e);\n  }\n  onClose(e, t) {\n    (this.readyState === \"opening\" || this.readyState === \"open\" || this.readyState === \"closing\") && (this.clearTimeoutFn(this.pingTimeoutTimer), this.transport.removeAllListeners(\"close\"), this.transport.close(), this.transport.removeAllListeners(), typeof removeEventListener == \"function\" && (removeEventListener(\"beforeunload\", this.beforeunloadEventListener, !1), removeEventListener(\"offline\", this.offlineEventListener, !1)), this.readyState = \"closed\", this.id = null, this.emitReserved(\"close\", e, t), this.writeBuffer = [], this.prevBufferLen = 0);\n  }\n  filterUpgrades(e) {\n    const t = [];\n    let r = 0;\n    const s = e.length;\n    for (; r < s; r++)\n      ~this.transports.indexOf(e[r]) && t.push(e[r]);\n    return t;\n  }\n}\nCe.protocol = Os;\nfunction va(n, e = \"\", t) {\n  let r = n;\n  t = t || typeof location < \"u\" && location, n == null && (n = t.protocol + \"//\" + t.host), typeof n == \"string\" && (n.charAt(0) === \"/\" && (n.charAt(1) === \"/\" ? n = t.protocol + n : n = t.host + n), /^(https?|wss?):\\/\\//.test(n) || (typeof t < \"u\" ? n = t.protocol + \"//\" + n : n = \"https://\" + n), r = kn(n)), r.port || (/^(http|ws)$/.test(r.protocol) ? r.port = \"80\" : /^(http|ws)s$/.test(r.protocol) && (r.port = \"443\")), r.path = r.path || \"/\";\n  const i = r.host.indexOf(\":\") !== -1 ? \"[\" + r.host + \"]\" : r.host;\n  return r.id = r.protocol + \"://\" + i + \":\" + r.port + e, r.href = r.protocol + \"://\" + i + (t && t.port === r.port ? \"\" : \":\" + r.port), r;\n}\nconst ya = typeof ArrayBuffer == \"function\", ma = (n) => typeof ArrayBuffer.isView == \"function\" ? ArrayBuffer.isView(n) : n.buffer instanceof ArrayBuffer, Ls = Object.prototype.toString, ga = typeof Blob == \"function\" || typeof Blob < \"u\" && Ls.call(Blob) === \"[object BlobConstructor]\", _a = typeof File == \"function\" || typeof File < \"u\" && Ls.call(File) === \"[object FileConstructor]\";\nfunction Yn(n) {\n  return ya && (n instanceof ArrayBuffer || ma(n)) || ga && n instanceof Blob || _a && n instanceof File;\n}\nfunction Pt(n, e) {\n  if (!n || typeof n != \"object\")\n    return !1;\n  if (Array.isArray(n)) {\n    for (let t = 0, r = n.length; t < r; t++)\n      if (Pt(n[t]))\n        return !0;\n    return !1;\n  }\n  if (Yn(n))\n    return !0;\n  if (n.toJSON && typeof n.toJSON == \"function\" && arguments.length === 1)\n    return Pt(n.toJSON(), !0);\n  for (const t in n)\n    if (Object.prototype.hasOwnProperty.call(n, t) && Pt(n[t]))\n      return !0;\n  return !1;\n}\nfunction ba(n) {\n  const e = [], t = n.data, r = n;\n  return r.data = Ln(t, e), r.attachments = e.length, { packet: r, buffers: e };\n}\nfunction Ln(n, e) {\n  if (!n)\n    return n;\n  if (Yn(n)) {\n    const t = { _placeholder: !0, num: e.length };\n    return e.push(n), t;\n  } else if (Array.isArray(n)) {\n    const t = new Array(n.length);\n    for (let r = 0; r < n.length; r++)\n      t[r] = Ln(n[r], e);\n    return t;\n  } else if (typeof n == \"object\" && !(n instanceof Date)) {\n    const t = {};\n    for (const r in n)\n      Object.prototype.hasOwnProperty.call(n, r) && (t[r] = Ln(n[r], e));\n    return t;\n  }\n  return n;\n}\nfunction wa(n, e) {\n  return n.data = Nn(n.data, e), delete n.attachments, n;\n}\nfunction Nn(n, e) {\n  if (!n)\n    return n;\n  if (n && n._placeholder === !0) {\n    if (typeof n.num == \"number\" && n.num >= 0 && n.num < e.length)\n      return e[n.num];\n    throw new Error(\"illegal attachments\");\n  } else if (Array.isArray(n))\n    for (let t = 0; t < n.length; t++)\n      n[t] = Nn(n[t], e);\n  else if (typeof n == \"object\")\n    for (const t in n)\n      Object.prototype.hasOwnProperty.call(n, t) && (n[t] = Nn(n[t], e));\n  return n;\n}\nconst Ea = [\n  \"connect\",\n  \"connect_error\",\n  \"disconnect\",\n  \"disconnecting\",\n  \"newListener\",\n  \"removeListener\"\n], Ra = 5;\nvar O;\n(function(n) {\n  n[n.CONNECT = 0] = \"CONNECT\", n[n.DISCONNECT = 1] = \"DISCONNECT\", n[n.EVENT = 2] = \"EVENT\", n[n.ACK = 3] = \"ACK\", n[n.CONNECT_ERROR = 4] = \"CONNECT_ERROR\", n[n.BINARY_EVENT = 5] = \"BINARY_EVENT\", n[n.BINARY_ACK = 6] = \"BINARY_ACK\";\n})(O || (O = {}));\nclass Sa {\n  constructor(e) {\n    this.replacer = e;\n  }\n  encode(e) {\n    return (e.type === O.EVENT || e.type === O.ACK) && Pt(e) ? this.encodeAsBinary({\n      type: e.type === O.EVENT ? O.BINARY_EVENT : O.BINARY_ACK,\n      nsp: e.nsp,\n      data: e.data,\n      id: e.id\n    }) : [this.encodeAsString(e)];\n  }\n  encodeAsString(e) {\n    let t = \"\" + e.type;\n    return (e.type === O.BINARY_EVENT || e.type === O.BINARY_ACK) && (t += e.attachments + \"-\"), e.nsp && e.nsp !== \"/\" && (t += e.nsp + \",\"), e.id != null && (t += e.id), e.data != null && (t += JSON.stringify(e.data, this.replacer)), t;\n  }\n  encodeAsBinary(e) {\n    const t = ba(e), r = this.encodeAsString(t.packet), s = t.buffers;\n    return s.unshift(r), s;\n  }\n}\nfunction Hr(n) {\n  return Object.prototype.toString.call(n) === \"[object Object]\";\n}\nclass zn extends K {\n  constructor(e) {\n    super(), this.reviver = e;\n  }\n  add(e) {\n    let t;\n    if (typeof e == \"string\") {\n      if (this.reconstructor)\n        throw new Error(\"got plaintext data when reconstructing a packet\");\n      t = this.decodeString(e);\n      const r = t.type === O.BINARY_EVENT;\n      r || t.type === O.BINARY_ACK ? (t.type = r ? O.EVENT : O.ACK, this.reconstructor = new Ta(t), t.attachments === 0 && super.emitReserved(\"decoded\", t)) : super.emitReserved(\"decoded\", t);\n    } else if (Yn(e) || e.base64)\n      if (this.reconstructor)\n        t = this.reconstructor.takeBinaryData(e), t && (this.reconstructor = null, super.emitReserved(\"decoded\", t));\n      else\n        throw new Error(\"got binary data when not reconstructing a packet\");\n    else\n      throw new Error(\"Unknown type: \" + e);\n  }\n  decodeString(e) {\n    let t = 0;\n    const r = {\n      type: Number(e.charAt(0))\n    };\n    if (O[r.type] === void 0)\n      throw new Error(\"unknown packet type \" + r.type);\n    if (r.type === O.BINARY_EVENT || r.type === O.BINARY_ACK) {\n      const i = t + 1;\n      for (; e.charAt(++t) !== \"-\" && t != e.length; )\n        ;\n      const o = e.substring(i, t);\n      if (o != Number(o) || e.charAt(t) !== \"-\")\n        throw new Error(\"Illegal attachments\");\n      r.attachments = Number(o);\n    }\n    if (e.charAt(t + 1) === \"/\") {\n      const i = t + 1;\n      for (; ++t && !(e.charAt(t) === \",\" || t === e.length); )\n        ;\n      r.nsp = e.substring(i, t);\n    } else\n      r.nsp = \"/\";\n    const s = e.charAt(t + 1);\n    if (s !== \"\" && Number(s) == s) {\n      const i = t + 1;\n      for (; ++t; ) {\n        const o = e.charAt(t);\n        if (o == null || Number(o) != o) {\n          --t;\n          break;\n        }\n        if (t === e.length)\n          break;\n      }\n      r.id = Number(e.substring(i, t + 1));\n    }\n    if (e.charAt(++t)) {\n      const i = this.tryParse(e.substr(t));\n      if (zn.isPayloadValid(r.type, i))\n        r.data = i;\n      else\n        throw new Error(\"invalid payload\");\n    }\n    return r;\n  }\n  tryParse(e) {\n    try {\n      return JSON.parse(e, this.reviver);\n    } catch {\n      return !1;\n    }\n  }\n  static isPayloadValid(e, t) {\n    switch (e) {\n      case O.CONNECT:\n        return Hr(t);\n      case O.DISCONNECT:\n        return t === void 0;\n      case O.CONNECT_ERROR:\n        return typeof t == \"string\" || Hr(t);\n      case O.EVENT:\n      case O.BINARY_EVENT:\n        return Array.isArray(t) && (typeof t[0] == \"number\" || typeof t[0] == \"string\" && Ea.indexOf(t[0]) === -1);\n      case O.ACK:\n      case O.BINARY_ACK:\n        return Array.isArray(t);\n    }\n  }\n  destroy() {\n    this.reconstructor && (this.reconstructor.finishedReconstruction(), this.reconstructor = null);\n  }\n}\nclass Ta {\n  constructor(e) {\n    this.packet = e, this.buffers = [], this.reconPack = e;\n  }\n  takeBinaryData(e) {\n    if (this.buffers.push(e), this.buffers.length === this.reconPack.attachments) {\n      const t = wa(this.reconPack, this.buffers);\n      return this.finishedReconstruction(), t;\n    }\n    return null;\n  }\n  finishedReconstruction() {\n    this.reconPack = null, this.buffers = [];\n  }\n}\nconst Oa = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  protocol: Ra,\n  get PacketType() {\n    return O;\n  },\n  Encoder: Sa,\n  Decoder: zn\n}, Symbol.toStringTag, { value: \"Module\" }));\nfunction pe(n, e, t) {\n  return n.on(e, t), function() {\n    n.off(e, t);\n  };\n}\nconst xa = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  newListener: 1,\n  removeListener: 1\n});\nclass Ns extends K {\n  constructor(e, t, r) {\n    super(), this.connected = !1, this.recovered = !1, this.receiveBuffer = [], this.sendBuffer = [], this._queue = [], this._queueSeq = 0, this.ids = 0, this.acks = {}, this.flags = {}, this.io = e, this.nsp = t, r && r.auth && (this.auth = r.auth), this._opts = Object.assign({}, r), this.io._autoConnect && this.open();\n  }\n  get disconnected() {\n    return !this.connected;\n  }\n  subEvents() {\n    if (this.subs)\n      return;\n    const e = this.io;\n    this.subs = [\n      pe(e, \"open\", this.onopen.bind(this)),\n      pe(e, \"packet\", this.onpacket.bind(this)),\n      pe(e, \"error\", this.onerror.bind(this)),\n      pe(e, \"close\", this.onclose.bind(this))\n    ];\n  }\n  get active() {\n    return !!this.subs;\n  }\n  connect() {\n    return this.connected ? this : (this.subEvents(), this.io._reconnecting || this.io.open(), this.io._readyState === \"open\" && this.onopen(), this);\n  }\n  open() {\n    return this.connect();\n  }\n  send(...e) {\n    return e.unshift(\"message\"), this.emit.apply(this, e), this;\n  }\n  emit(e, ...t) {\n    if (xa.hasOwnProperty(e))\n      throw new Error('\"' + e.toString() + '\" is a reserved event name');\n    if (t.unshift(e), this._opts.retries && !this.flags.fromQueue && !this.flags.volatile)\n      return this._addToQueue(t), this;\n    const r = {\n      type: O.EVENT,\n      data: t\n    };\n    if (r.options = {}, r.options.compress = this.flags.compress !== !1, typeof t[t.length - 1] == \"function\") {\n      const o = this.ids++, u = t.pop();\n      this._registerAckCallback(o, u), r.id = o;\n    }\n    const s = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    return this.flags.volatile && (!s || !this.connected) || (this.connected ? (this.notifyOutgoingListeners(r), this.packet(r)) : this.sendBuffer.push(r)), this.flags = {}, this;\n  }\n  _registerAckCallback(e, t) {\n    var r;\n    const s = (r = this.flags.timeout) !== null && r !== void 0 ? r : this._opts.ackTimeout;\n    if (s === void 0) {\n      this.acks[e] = t;\n      return;\n    }\n    const i = this.io.setTimeoutFn(() => {\n      delete this.acks[e];\n      for (let o = 0; o < this.sendBuffer.length; o++)\n        this.sendBuffer[o].id === e && this.sendBuffer.splice(o, 1);\n      t.call(this, new Error(\"operation has timed out\"));\n    }, s);\n    this.acks[e] = (...o) => {\n      this.io.clearTimeoutFn(i), t.apply(this, [null, ...o]);\n    };\n  }\n  emitWithAck(e, ...t) {\n    const r = this.flags.timeout !== void 0 || this._opts.ackTimeout !== void 0;\n    return new Promise((s, i) => {\n      t.push((o, u) => r ? o ? i(o) : s(u) : s(o)), this.emit(e, ...t);\n    });\n  }\n  _addToQueue(e) {\n    let t;\n    typeof e[e.length - 1] == \"function\" && (t = e.pop());\n    const r = {\n      id: this._queueSeq++,\n      tryCount: 0,\n      pending: !1,\n      args: e,\n      flags: Object.assign({ fromQueue: !0 }, this.flags)\n    };\n    e.push((s, ...i) => r !== this._queue[0] ? void 0 : (s !== null ? r.tryCount > this._opts.retries && (this._queue.shift(), t && t(s)) : (this._queue.shift(), t && t(null, ...i)), r.pending = !1, this._drainQueue())), this._queue.push(r), this._drainQueue();\n  }\n  _drainQueue(e = !1) {\n    if (!this.connected || this._queue.length === 0)\n      return;\n    const t = this._queue[0];\n    t.pending && !e || (t.pending = !0, t.tryCount++, this.flags = t.flags, this.emit.apply(this, t.args));\n  }\n  packet(e) {\n    e.nsp = this.nsp, this.io._packet(e);\n  }\n  onopen() {\n    typeof this.auth == \"function\" ? this.auth((e) => {\n      this._sendConnectPacket(e);\n    }) : this._sendConnectPacket(this.auth);\n  }\n  _sendConnectPacket(e) {\n    this.packet({\n      type: O.CONNECT,\n      data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, e) : e\n    });\n  }\n  onerror(e) {\n    this.connected || this.emitReserved(\"connect_error\", e);\n  }\n  onclose(e, t) {\n    this.connected = !1, delete this.id, this.emitReserved(\"disconnect\", e, t);\n  }\n  onpacket(e) {\n    if (e.nsp === this.nsp)\n      switch (e.type) {\n        case O.CONNECT:\n          e.data && e.data.sid ? this.onconnect(e.data.sid, e.data.pid) : this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          break;\n        case O.EVENT:\n        case O.BINARY_EVENT:\n          this.onevent(e);\n          break;\n        case O.ACK:\n        case O.BINARY_ACK:\n          this.onack(e);\n          break;\n        case O.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case O.CONNECT_ERROR:\n          this.destroy();\n          const r = new Error(e.data.message);\n          r.data = e.data.data, this.emitReserved(\"connect_error\", r);\n          break;\n      }\n  }\n  onevent(e) {\n    const t = e.data || [];\n    e.id != null && t.push(this.ack(e.id)), this.connected ? this.emitEvent(t) : this.receiveBuffer.push(Object.freeze(t));\n  }\n  emitEvent(e) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const t = this._anyListeners.slice();\n      for (const r of t)\n        r.apply(this, e);\n    }\n    super.emit.apply(this, e), this._pid && e.length && typeof e[e.length - 1] == \"string\" && (this._lastOffset = e[e.length - 1]);\n  }\n  ack(e) {\n    const t = this;\n    let r = !1;\n    return function(...s) {\n      r || (r = !0, t.packet({\n        type: O.ACK,\n        id: e,\n        data: s\n      }));\n    };\n  }\n  onack(e) {\n    const t = this.acks[e.id];\n    typeof t == \"function\" && (t.apply(this, e.data), delete this.acks[e.id]);\n  }\n  onconnect(e, t) {\n    this.id = e, this.recovered = t && this._pid === t, this._pid = t, this.connected = !0, this.emitBuffered(), this.emitReserved(\"connect\"), this._drainQueue(!0);\n  }\n  emitBuffered() {\n    this.receiveBuffer.forEach((e) => this.emitEvent(e)), this.receiveBuffer = [], this.sendBuffer.forEach((e) => {\n      this.notifyOutgoingListeners(e), this.packet(e);\n    }), this.sendBuffer = [];\n  }\n  ondisconnect() {\n    this.destroy(), this.onclose(\"io server disconnect\");\n  }\n  destroy() {\n    this.subs && (this.subs.forEach((e) => e()), this.subs = void 0), this.io._destroy(this);\n  }\n  disconnect() {\n    return this.connected && this.packet({ type: O.DISCONNECT }), this.destroy(), this.connected && this.onclose(\"io client disconnect\"), this;\n  }\n  close() {\n    return this.disconnect();\n  }\n  compress(e) {\n    return this.flags.compress = e, this;\n  }\n  get volatile() {\n    return this.flags.volatile = !0, this;\n  }\n  timeout(e) {\n    return this.flags.timeout = e, this;\n  }\n  onAny(e) {\n    return this._anyListeners = this._anyListeners || [], this._anyListeners.push(e), this;\n  }\n  prependAny(e) {\n    return this._anyListeners = this._anyListeners || [], this._anyListeners.unshift(e), this;\n  }\n  offAny(e) {\n    if (!this._anyListeners)\n      return this;\n    if (e) {\n      const t = this._anyListeners;\n      for (let r = 0; r < t.length; r++)\n        if (e === t[r])\n          return t.splice(r, 1), this;\n    } else\n      this._anyListeners = [];\n    return this;\n  }\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  onAnyOutgoing(e) {\n    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.push(e), this;\n  }\n  prependAnyOutgoing(e) {\n    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.unshift(e), this;\n  }\n  offAnyOutgoing(e) {\n    if (!this._anyOutgoingListeners)\n      return this;\n    if (e) {\n      const t = this._anyOutgoingListeners;\n      for (let r = 0; r < t.length; r++)\n        if (e === t[r])\n          return t.splice(r, 1), this;\n    } else\n      this._anyOutgoingListeners = [];\n    return this;\n  }\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  notifyOutgoingListeners(e) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const t = this._anyOutgoingListeners.slice();\n      for (const r of t)\n        r.apply(this, e.data);\n    }\n  }\n}\nfunction Xe(n) {\n  n = n || {}, this.ms = n.min || 100, this.max = n.max || 1e4, this.factor = n.factor || 2, this.jitter = n.jitter > 0 && n.jitter <= 1 ? n.jitter : 0, this.attempts = 0;\n}\nXe.prototype.duration = function() {\n  var n = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var e = Math.random(), t = Math.floor(e * this.jitter * n);\n    n = (Math.floor(e * 10) & 1) == 0 ? n - t : n + t;\n  }\n  return Math.min(n, this.max) | 0;\n};\nXe.prototype.reset = function() {\n  this.attempts = 0;\n};\nXe.prototype.setMin = function(n) {\n  this.ms = n;\n};\nXe.prototype.setMax = function(n) {\n  this.max = n;\n};\nXe.prototype.setJitter = function(n) {\n  this.jitter = n;\n};\nclass Pn extends K {\n  constructor(e, t) {\n    var r;\n    super(), this.nsps = {}, this.subs = [], e && typeof e == \"object\" && (t = e, e = void 0), t = t || {}, t.path = t.path || \"/socket.io\", this.opts = t, Mt(this, t), this.reconnection(t.reconnection !== !1), this.reconnectionAttempts(t.reconnectionAttempts || 1 / 0), this.reconnectionDelay(t.reconnectionDelay || 1e3), this.reconnectionDelayMax(t.reconnectionDelayMax || 5e3), this.randomizationFactor((r = t.randomizationFactor) !== null && r !== void 0 ? r : 0.5), this.backoff = new Xe({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    }), this.timeout(t.timeout == null ? 2e4 : t.timeout), this._readyState = \"closed\", this.uri = e;\n    const s = t.parser || Oa;\n    this.encoder = new s.Encoder(), this.decoder = new s.Decoder(), this._autoConnect = t.autoConnect !== !1, this._autoConnect && this.open();\n  }\n  reconnection(e) {\n    return arguments.length ? (this._reconnection = !!e, this) : this._reconnection;\n  }\n  reconnectionAttempts(e) {\n    return e === void 0 ? this._reconnectionAttempts : (this._reconnectionAttempts = e, this);\n  }\n  reconnectionDelay(e) {\n    var t;\n    return e === void 0 ? this._reconnectionDelay : (this._reconnectionDelay = e, (t = this.backoff) === null || t === void 0 || t.setMin(e), this);\n  }\n  randomizationFactor(e) {\n    var t;\n    return e === void 0 ? this._randomizationFactor : (this._randomizationFactor = e, (t = this.backoff) === null || t === void 0 || t.setJitter(e), this);\n  }\n  reconnectionDelayMax(e) {\n    var t;\n    return e === void 0 ? this._reconnectionDelayMax : (this._reconnectionDelayMax = e, (t = this.backoff) === null || t === void 0 || t.setMax(e), this);\n  }\n  timeout(e) {\n    return arguments.length ? (this._timeout = e, this) : this._timeout;\n  }\n  maybeReconnectOnOpen() {\n    !this._reconnecting && this._reconnection && this.backoff.attempts === 0 && this.reconnect();\n  }\n  open(e) {\n    if (~this._readyState.indexOf(\"open\"))\n      return this;\n    this.engine = new Ce(this.uri, this.opts);\n    const t = this.engine, r = this;\n    this._readyState = \"opening\", this.skipReconnect = !1;\n    const s = pe(t, \"open\", function() {\n      r.onopen(), e && e();\n    }), i = (u) => {\n      this.cleanup(), this._readyState = \"closed\", this.emitReserved(\"error\", u), e ? e(u) : this.maybeReconnectOnOpen();\n    }, o = pe(t, \"error\", i);\n    if (this._timeout !== !1) {\n      const u = this._timeout, l = this.setTimeoutFn(() => {\n        s(), i(new Error(\"timeout\")), t.close();\n      }, u);\n      this.opts.autoUnref && l.unref(), this.subs.push(() => {\n        this.clearTimeoutFn(l);\n      });\n    }\n    return this.subs.push(s), this.subs.push(o), this;\n  }\n  connect(e) {\n    return this.open(e);\n  }\n  onopen() {\n    this.cleanup(), this._readyState = \"open\", this.emitReserved(\"open\");\n    const e = this.engine;\n    this.subs.push(pe(e, \"ping\", this.onping.bind(this)), pe(e, \"data\", this.ondata.bind(this)), pe(e, \"error\", this.onerror.bind(this)), pe(e, \"close\", this.onclose.bind(this)), pe(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  onping() {\n    this.emitReserved(\"ping\");\n  }\n  ondata(e) {\n    try {\n      this.decoder.add(e);\n    } catch (t) {\n      this.onclose(\"parse error\", t);\n    }\n  }\n  ondecoded(e) {\n    Jn(() => {\n      this.emitReserved(\"packet\", e);\n    }, this.setTimeoutFn);\n  }\n  onerror(e) {\n    this.emitReserved(\"error\", e);\n  }\n  socket(e, t) {\n    let r = this.nsps[e];\n    return r ? this._autoConnect && !r.active && r.connect() : (r = new Ns(this, e, t), this.nsps[e] = r), r;\n  }\n  _destroy(e) {\n    const t = Object.keys(this.nsps);\n    for (const r of t)\n      if (this.nsps[r].active)\n        return;\n    this._close();\n  }\n  _packet(e) {\n    const t = this.encoder.encode(e);\n    for (let r = 0; r < t.length; r++)\n      this.engine.write(t[r], e.options);\n  }\n  cleanup() {\n    this.subs.forEach((e) => e()), this.subs.length = 0, this.decoder.destroy();\n  }\n  _close() {\n    this.skipReconnect = !0, this._reconnecting = !1, this.onclose(\"forced close\"), this.engine && this.engine.close();\n  }\n  disconnect() {\n    return this._close();\n  }\n  onclose(e, t) {\n    this.cleanup(), this.backoff.reset(), this._readyState = \"closed\", this.emitReserved(\"close\", e, t), this._reconnection && !this.skipReconnect && this.reconnect();\n  }\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect)\n      return this;\n    const e = this;\n    if (this.backoff.attempts >= this._reconnectionAttempts)\n      this.backoff.reset(), this.emitReserved(\"reconnect_failed\"), this._reconnecting = !1;\n    else {\n      const t = this.backoff.duration();\n      this._reconnecting = !0;\n      const r = this.setTimeoutFn(() => {\n        e.skipReconnect || (this.emitReserved(\"reconnect_attempt\", e.backoff.attempts), !e.skipReconnect && e.open((s) => {\n          s ? (e._reconnecting = !1, e.reconnect(), this.emitReserved(\"reconnect_error\", s)) : e.onreconnect();\n        }));\n      }, t);\n      this.opts.autoUnref && r.unref(), this.subs.push(() => {\n        this.clearTimeoutFn(r);\n      });\n    }\n  }\n  onreconnect() {\n    const e = this.backoff.attempts;\n    this._reconnecting = !1, this.backoff.reset(), this.emitReserved(\"reconnect\", e);\n  }\n}\nconst it = {};\nfunction Bt(n, e) {\n  typeof n == \"object\" && (e = n, n = void 0), e = e || {};\n  const t = va(n, e.path || \"/socket.io\"), r = t.source, s = t.id, i = t.path, o = it[s] && i in it[s].nsps, u = e.forceNew || e[\"force new connection\"] || e.multiplex === !1 || o;\n  let l;\n  return u ? l = new Pn(r, e) : (it[s] || (it[s] = new Pn(r, e)), l = it[s]), t.query && !e.query && (e.query = t.queryKey), l.socket(t.path, e);\n}\nObject.assign(Bt, {\n  Manager: Pn,\n  Socket: Ns,\n  io: Bt,\n  connect: Bt\n});\nclass Ca {\n  constructor(e, t, r, s) {\n    xe(this, \"socket_port\");\n    xe(this, \"host\");\n    xe(this, \"port\");\n    xe(this, \"protocol\");\n    xe(this, \"url\");\n    xe(this, \"site_name\");\n    xe(this, \"socket\");\n    var i, o;\n    if (this.socket_port = r != null ? r : \"9000\", this.host = (i = window.location) == null ? void 0 : i.hostname, this.port = (o = window.location) != null && o.port ? `:${this.socket_port}` : \"\", this.protocol = this.port ? \"http\" : \"https\", e) {\n      let u = new URL(e);\n      u.port = \"\", r ? (u.port = r, this.url = u.toString()) : this.url = u.toString();\n    } else\n      this.url = `${this.protocol}://${this.host}${this.port}/`;\n    t && (this.url = `${this.url}${t}`), this.site_name = t, this.socket = Bt(`${this.url}`, {\n      withCredentials: !0,\n      secure: this.protocol === \"https\",\n      extraHeaders: s && s.useToken === !0 ? {\n        Authorization: `${s.type} ${s.token}`\n      } : {}\n    });\n  }\n}\nvar Ps = { exports: {} }, ot = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Jr;\nfunction Aa() {\n  if (Jr)\n    return ot;\n  Jr = 1;\n  var n = (react__WEBPACK_IMPORTED_MODULE_0___default()), e = Symbol.for(\"react.element\"), t = Symbol.for(\"react.fragment\"), r = Object.prototype.hasOwnProperty, s = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, i = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function o(u, l, a) {\n    var h, f = {}, p = null, m = null;\n    a !== void 0 && (p = \"\" + a), l.key !== void 0 && (p = \"\" + l.key), l.ref !== void 0 && (m = l.ref);\n    for (h in l)\n      r.call(l, h) && !i.hasOwnProperty(h) && (f[h] = l[h]);\n    if (u && u.defaultProps)\n      for (h in l = u.defaultProps, l)\n        f[h] === void 0 && (f[h] = l[h]);\n    return { $$typeof: e, type: u, key: p, ref: m, props: f, _owner: s.current };\n  }\n  return ot.Fragment = t, ot.jsx = o, ot.jsxs = o, ot;\n}\nvar at = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Yr;\nfunction Da() {\n  return Yr || (Yr = 1,  true && function() {\n    var n = (react__WEBPACK_IMPORTED_MODULE_0___default()), e = Symbol.for(\"react.element\"), t = Symbol.for(\"react.portal\"), r = Symbol.for(\"react.fragment\"), s = Symbol.for(\"react.strict_mode\"), i = Symbol.for(\"react.profiler\"), o = Symbol.for(\"react.provider\"), u = Symbol.for(\"react.context\"), l = Symbol.for(\"react.forward_ref\"), a = Symbol.for(\"react.suspense\"), h = Symbol.for(\"react.suspense_list\"), f = Symbol.for(\"react.memo\"), p = Symbol.for(\"react.lazy\"), m = Symbol.for(\"react.offscreen\"), g = Symbol.iterator, b = \"@@iterator\";\n    function E(c) {\n      if (c === null || typeof c != \"object\")\n        return null;\n      var d = g && c[g] || c[b];\n      return typeof d == \"function\" ? d : null;\n    }\n    var _ = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function S(c) {\n      {\n        for (var d = arguments.length, v = new Array(d > 1 ? d - 1 : 0), w = 1; w < d; w++)\n          v[w - 1] = arguments[w];\n        k(\"error\", c, v);\n      }\n    }\n    function k(c, d, v) {\n      {\n        var w = _.ReactDebugCurrentFrame, A = w.getStackAddendum();\n        A !== \"\" && (d += \"%s\", v = v.concat([A]));\n        var q = v.map(function(x) {\n          return String(x);\n        });\n        q.unshift(\"Warning: \" + d), Function.prototype.apply.call(console[c], console, q);\n      }\n    }\n    var y = !1, M = !1, T = !1, V = !1, D = !1, j;\n    j = Symbol.for(\"react.module.reference\");\n    function L(c) {\n      return !!(typeof c == \"string\" || typeof c == \"function\" || c === r || c === i || D || c === s || c === a || c === h || V || c === m || y || M || T || typeof c == \"object\" && c !== null && (c.$$typeof === p || c.$$typeof === f || c.$$typeof === o || c.$$typeof === u || c.$$typeof === l || c.$$typeof === j || c.getModuleId !== void 0));\n    }\n    function Q(c, d, v) {\n      var w = c.displayName;\n      if (w)\n        return w;\n      var A = d.displayName || d.name || \"\";\n      return A !== \"\" ? v + \"(\" + A + \")\" : v;\n    }\n    function ne(c) {\n      return c.displayName || \"Context\";\n    }\n    function G(c) {\n      if (c == null)\n        return null;\n      if (typeof c.tag == \"number\" && S(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof c == \"function\")\n        return c.displayName || c.name || null;\n      if (typeof c == \"string\")\n        return c;\n      switch (c) {\n        case r:\n          return \"Fragment\";\n        case t:\n          return \"Portal\";\n        case i:\n          return \"Profiler\";\n        case s:\n          return \"StrictMode\";\n        case a:\n          return \"Suspense\";\n        case h:\n          return \"SuspenseList\";\n      }\n      if (typeof c == \"object\")\n        switch (c.$$typeof) {\n          case u:\n            var d = c;\n            return ne(d) + \".Consumer\";\n          case o:\n            var v = c;\n            return ne(v._context) + \".Provider\";\n          case l:\n            return Q(c, c.render, \"ForwardRef\");\n          case f:\n            var w = c.displayName || null;\n            return w !== null ? w : G(c.type) || \"Memo\";\n          case p: {\n            var A = c, q = A._payload, x = A._init;\n            try {\n              return G(x(q));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var F = Object.assign, Le = 0, Qe, Ze, be, et, yt, we, Ee;\n    function Ne() {\n    }\n    Ne.__reactDisabledLog = !0;\n    function mt() {\n      {\n        if (Le === 0) {\n          Qe = console.log, Ze = console.info, be = console.warn, et = console.error, yt = console.group, we = console.groupCollapsed, Ee = console.groupEnd;\n          var c = {\n            configurable: !0,\n            enumerable: !0,\n            value: Ne,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: c,\n            log: c,\n            warn: c,\n            error: c,\n            group: c,\n            groupCollapsed: c,\n            groupEnd: c\n          });\n        }\n        Le++;\n      }\n    }\n    function Ie() {\n      {\n        if (Le--, Le === 0) {\n          var c = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: F({}, c, {\n              value: Qe\n            }),\n            info: F({}, c, {\n              value: Ze\n            }),\n            warn: F({}, c, {\n              value: be\n            }),\n            error: F({}, c, {\n              value: et\n            }),\n            group: F({}, c, {\n              value: yt\n            }),\n            groupCollapsed: F({}, c, {\n              value: we\n            }),\n            groupEnd: F({}, c, {\n              value: Ee\n            })\n          });\n        }\n        Le < 0 && S(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var Ve = _.ReactCurrentDispatcher, je;\n    function $e(c, d, v) {\n      {\n        if (je === void 0)\n          try {\n            throw Error();\n          } catch (A) {\n            var w = A.stack.trim().match(/\\n( *(at )?)/);\n            je = w && w[1] || \"\";\n          }\n        return `\n` + je + c;\n      }\n    }\n    var tt = !1, ve;\n    {\n      var gt = typeof WeakMap == \"function\" ? WeakMap : Map;\n      ve = new gt();\n    }\n    function N(c, d) {\n      if (!c || tt)\n        return \"\";\n      {\n        var v = ve.get(c);\n        if (v !== void 0)\n          return v;\n      }\n      var w;\n      tt = !0;\n      var A = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var q;\n      q = Ve.current, Ve.current = null, mt();\n      try {\n        if (d) {\n          var x = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(x.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(x, []);\n            } catch (Se) {\n              w = Se;\n            }\n            Reflect.construct(c, [], x);\n          } else {\n            try {\n              x.call();\n            } catch (Se) {\n              w = Se;\n            }\n            c.call(x.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (Se) {\n            w = Se;\n          }\n          c();\n        }\n      } catch (Se) {\n        if (Se && w && typeof Se.stack == \"string\") {\n          for (var R = Se.stack.split(`\n`), se = w.stack.split(`\n`), W = R.length - 1, Y = se.length - 1; W >= 1 && Y >= 0 && R[W] !== se[Y]; )\n            Y--;\n          for (; W >= 1 && Y >= 0; W--, Y--)\n            if (R[W] !== se[Y]) {\n              if (W !== 1 || Y !== 1)\n                do\n                  if (W--, Y--, Y < 0 || R[W] !== se[Y]) {\n                    var le = `\n` + R[W].replace(\" at new \", \" at \");\n                    return c.displayName && le.includes(\"<anonymous>\") && (le = le.replace(\"<anonymous>\", c.displayName)), typeof c == \"function\" && ve.set(c, le), le;\n                  }\n                while (W >= 1 && Y >= 0);\n              break;\n            }\n        }\n      } finally {\n        tt = !1, Ve.current = q, Ie(), Error.prepareStackTrace = A;\n      }\n      var Je = c ? c.displayName || c.name : \"\", rr = Je ? $e(Je) : \"\";\n      return typeof c == \"function\" && ve.set(c, rr), rr;\n    }\n    function U(c, d, v) {\n      return N(c, !1);\n    }\n    function X(c) {\n      var d = c.prototype;\n      return !!(d && d.isReactComponent);\n    }\n    function I(c, d, v) {\n      if (c == null)\n        return \"\";\n      if (typeof c == \"function\")\n        return N(c, X(c));\n      if (typeof c == \"string\")\n        return $e(c);\n      switch (c) {\n        case a:\n          return $e(\"Suspense\");\n        case h:\n          return $e(\"SuspenseList\");\n      }\n      if (typeof c == \"object\")\n        switch (c.$$typeof) {\n          case l:\n            return U(c.render);\n          case f:\n            return I(c.type, d, v);\n          case p: {\n            var w = c, A = w._payload, q = w._init;\n            try {\n              return I(q(A), d, v);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var re = Object.prototype.hasOwnProperty, Re = {}, H = _.ReactDebugCurrentFrame;\n    function J(c) {\n      if (c) {\n        var d = c._owner, v = I(c.type, c._source, d ? d.type : null);\n        H.setExtraStackFrame(v);\n      } else\n        H.setExtraStackFrame(null);\n    }\n    function de(c, d, v, w, A) {\n      {\n        var q = Function.call.bind(re);\n        for (var x in c)\n          if (q(c, x)) {\n            var R = void 0;\n            try {\n              if (typeof c[x] != \"function\") {\n                var se = Error((w || \"React class\") + \": \" + v + \" type `\" + x + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof c[x] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw se.name = \"Invariant Violation\", se;\n              }\n              R = c[x](d, x, w, v, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (W) {\n              R = W;\n            }\n            R && !(R instanceof Error) && (J(A), S(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", w || \"React class\", v, x, typeof R), J(null)), R instanceof Error && !(R.message in Re) && (Re[R.message] = !0, J(A), S(\"Failed %s type: %s\", v, R.message), J(null));\n          }\n      }\n    }\n    var _t = Array.isArray;\n    function Me(c) {\n      return _t(c);\n    }\n    function bt(c) {\n      {\n        var d = typeof Symbol == \"function\" && Symbol.toStringTag, v = d && c[Symbol.toStringTag] || c.constructor.name || \"Object\";\n        return v;\n      }\n    }\n    function ie(c) {\n      try {\n        return ce(c), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function ce(c) {\n      return \"\" + c;\n    }\n    function We(c) {\n      if (ie(c))\n        return S(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", bt(c)), ce(c);\n    }\n    var Pe = _.ReactCurrentOwner, nt = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, Kn, Gn, Wt;\n    Wt = {};\n    function Us(c) {\n      if (re.call(c, \"ref\")) {\n        var d = Object.getOwnPropertyDescriptor(c, \"ref\").get;\n        if (d && d.isReactWarning)\n          return !1;\n      }\n      return c.ref !== void 0;\n    }\n    function qs(c) {\n      if (re.call(c, \"key\")) {\n        var d = Object.getOwnPropertyDescriptor(c, \"key\").get;\n        if (d && d.isReactWarning)\n          return !1;\n      }\n      return c.key !== void 0;\n    }\n    function Is(c, d) {\n      if (typeof c.ref == \"string\" && Pe.current && d && Pe.current.stateNode !== d) {\n        var v = G(Pe.current.type);\n        Wt[v] || (S('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', G(Pe.current.type), c.ref), Wt[v] = !0);\n      }\n    }\n    function Vs(c, d) {\n      {\n        var v = function() {\n          Kn || (Kn = !0, S(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", d));\n        };\n        v.isReactWarning = !0, Object.defineProperty(c, \"key\", {\n          get: v,\n          configurable: !0\n        });\n      }\n    }\n    function js(c, d) {\n      {\n        var v = function() {\n          Gn || (Gn = !0, S(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", d));\n        };\n        v.isReactWarning = !0, Object.defineProperty(c, \"ref\", {\n          get: v,\n          configurable: !0\n        });\n      }\n    }\n    var $s = function(c, d, v, w, A, q, x) {\n      var R = {\n        $$typeof: e,\n        type: c,\n        key: d,\n        ref: v,\n        props: x,\n        _owner: q\n      };\n      return R._store = {}, Object.defineProperty(R._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(R, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: w\n      }), Object.defineProperty(R, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: A\n      }), Object.freeze && (Object.freeze(R.props), Object.freeze(R)), R;\n    };\n    function Ms(c, d, v, w, A) {\n      {\n        var q, x = {}, R = null, se = null;\n        v !== void 0 && (We(v), R = \"\" + v), qs(d) && (We(d.key), R = \"\" + d.key), Us(d) && (se = d.ref, Is(d, A));\n        for (q in d)\n          re.call(d, q) && !nt.hasOwnProperty(q) && (x[q] = d[q]);\n        if (c && c.defaultProps) {\n          var W = c.defaultProps;\n          for (q in W)\n            x[q] === void 0 && (x[q] = W[q]);\n        }\n        if (R || se) {\n          var Y = typeof c == \"function\" ? c.displayName || c.name || \"Unknown\" : c;\n          R && Vs(x, Y), se && js(x, Y);\n        }\n        return $s(c, R, se, A, w, Pe.current, x);\n      }\n    }\n    var Ht = _.ReactCurrentOwner, Xn = _.ReactDebugCurrentFrame;\n    function He(c) {\n      if (c) {\n        var d = c._owner, v = I(c.type, c._source, d ? d.type : null);\n        Xn.setExtraStackFrame(v);\n      } else\n        Xn.setExtraStackFrame(null);\n    }\n    var Jt;\n    Jt = !1;\n    function Yt(c) {\n      return typeof c == \"object\" && c !== null && c.$$typeof === e;\n    }\n    function Qn() {\n      {\n        if (Ht.current) {\n          var c = G(Ht.current.type);\n          if (c)\n            return `\n\nCheck the render method of \\`` + c + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function Ws(c) {\n      {\n        if (c !== void 0) {\n          var d = c.fileName.replace(/^.*[\\\\\\/]/, \"\"), v = c.lineNumber;\n          return `\n\nCheck your code at ` + d + \":\" + v + \".\";\n        }\n        return \"\";\n      }\n    }\n    var Zn = {};\n    function Hs(c) {\n      {\n        var d = Qn();\n        if (!d) {\n          var v = typeof c == \"string\" ? c : c.displayName || c.name;\n          v && (d = `\n\nCheck the top-level render call using <` + v + \">.\");\n        }\n        return d;\n      }\n    }\n    function er(c, d) {\n      {\n        if (!c._store || c._store.validated || c.key != null)\n          return;\n        c._store.validated = !0;\n        var v = Hs(d);\n        if (Zn[v])\n          return;\n        Zn[v] = !0;\n        var w = \"\";\n        c && c._owner && c._owner !== Ht.current && (w = \" It was passed a child from \" + G(c._owner.type) + \".\"), He(c), S('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', v, w), He(null);\n      }\n    }\n    function tr(c, d) {\n      {\n        if (typeof c != \"object\")\n          return;\n        if (Me(c))\n          for (var v = 0; v < c.length; v++) {\n            var w = c[v];\n            Yt(w) && er(w, d);\n          }\n        else if (Yt(c))\n          c._store && (c._store.validated = !0);\n        else if (c) {\n          var A = E(c);\n          if (typeof A == \"function\" && A !== c.entries)\n            for (var q = A.call(c), x; !(x = q.next()).done; )\n              Yt(x.value) && er(x.value, d);\n        }\n      }\n    }\n    function Js(c) {\n      {\n        var d = c.type;\n        if (d == null || typeof d == \"string\")\n          return;\n        var v;\n        if (typeof d == \"function\")\n          v = d.propTypes;\n        else if (typeof d == \"object\" && (d.$$typeof === l || d.$$typeof === f))\n          v = d.propTypes;\n        else\n          return;\n        if (v) {\n          var w = G(d);\n          de(v, c.props, \"prop\", w, c);\n        } else if (d.PropTypes !== void 0 && !Jt) {\n          Jt = !0;\n          var A = G(d);\n          S(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", A || \"Unknown\");\n        }\n        typeof d.getDefaultProps == \"function\" && !d.getDefaultProps.isReactClassApproved && S(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function Ys(c) {\n      {\n        for (var d = Object.keys(c.props), v = 0; v < d.length; v++) {\n          var w = d[v];\n          if (w !== \"children\" && w !== \"key\") {\n            He(c), S(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", w), He(null);\n            break;\n          }\n        }\n        c.ref !== null && (He(c), S(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), He(null));\n      }\n    }\n    function nr(c, d, v, w, A, q) {\n      {\n        var x = L(c);\n        if (!x) {\n          var R = \"\";\n          (c === void 0 || typeof c == \"object\" && c !== null && Object.keys(c).length === 0) && (R += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var se = Ws(A);\n          se ? R += se : R += Qn();\n          var W;\n          c === null ? W = \"null\" : Me(c) ? W = \"array\" : c !== void 0 && c.$$typeof === e ? (W = \"<\" + (G(c.type) || \"Unknown\") + \" />\", R = \" Did you accidentally export a JSX literal instead of a component?\") : W = typeof c, S(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", W, R);\n        }\n        var Y = Ms(c, d, v, A, q);\n        if (Y == null)\n          return Y;\n        if (x) {\n          var le = d.children;\n          if (le !== void 0)\n            if (w)\n              if (Me(le)) {\n                for (var Je = 0; Je < le.length; Je++)\n                  tr(le[Je], c);\n                Object.freeze && Object.freeze(le);\n              } else\n                S(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              tr(le, c);\n        }\n        return c === r ? Ys(Y) : Js(Y), Y;\n      }\n    }\n    function zs(c, d, v) {\n      return nr(c, d, v, !0);\n    }\n    function Ks(c, d, v) {\n      return nr(c, d, v, !1);\n    }\n    var Gs = Ks, Xs = zs;\n    at.Fragment = r, at.jsx = Gs, at.jsxs = Xs;\n  }()), at;\n}\n(function(n) {\n   false ? 0 : n.exports = Da();\n})(Ps);\nconst ka = Ps.exports.jsx, te = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null), Ua = ({\n  url: n = \"\",\n  tokenParams: e,\n  socketPort: t,\n  siteName: r,\n  enableSocket: s = !0,\n  children: i\n}) => {\n  const o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const u = new oo.FrappeApp(n, e);\n    return {\n      url: n,\n      tokenParams: e,\n      app: u,\n      auth: u.auth(),\n      db: u.db(),\n      call: u.call(),\n      file: u.file(),\n      socket: s ? new Ca(n, r, t, e).socket : void 0,\n      enableSocket: s,\n      socketPort: t\n    };\n  }, [n, e, t, s]);\n  return /* @__PURE__ */ ka(te.Provider, {\n    value: o,\n    children: i\n  });\n}, qa = (n) => {\n  const {\n    url: e,\n    auth: t,\n    tokenParams: r\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [s, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const g = document.cookie.split(\";\").find((b) => b.trim().startsWith(\"user_id=\"));\n    if (g) {\n      const b = g.split(\"=\")[1];\n      i(b && b !== \"Guest\" ? b : null);\n    } else\n      i(null);\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r && r.useToken ? i(null) : o();\n  }, []);\n  const {\n    data: u,\n    error: l,\n    isLoading: a,\n    isValidating: h,\n    mutate: f\n  } = vt(() => r && r.useToken || s ? `${e}/api/method/frappe.auth.get_logged_user` : null, () => t.getLoggedInUser(), {\n    onError: () => {\n      i(null);\n    },\n    shouldRetryOnError: !1,\n    revalidateOnFocus: !1,\n    ...n\n  }), p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (g, b) => t.loginWithUsernamePassword({\n    username: g,\n    password: b\n  }).then((E) => {\n    o();\n  }), []), m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => t.logout().then(() => f(null)).then(() => i(null)), []);\n  return {\n    isLoading: s === void 0 || a,\n    currentUser: u,\n    isValidating: h,\n    error: l,\n    login: p,\n    logout: m,\n    updateCurrentUser: f,\n    getUserCookie: o\n  };\n}, Bs = (n, e, t) => {\n  let r = `${e}/api/resource/`;\n  return t ? r += `${n}/${t}` : r += `${n}`, r;\n}, Ia = (n, e, t, r) => {\n  const {\n    url: s,\n    db: i\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te);\n  return {\n    ...vt(t === void 0 ? Bs(n, s, e) : t, () => i.getDoc(n, e), r)\n  };\n}, La = (n) => {\n  var t, r, s;\n  let e = \"\";\n  if (n != null && n.fields && (e += \"fields=\" + JSON.stringify(n == null ? void 0 : n.fields) + \"&\"), n != null && n.filters && (e += \"filters=\" + JSON.stringify(n == null ? void 0 : n.filters) + \"&\"), n != null && n.orFilters && (e += \"or_filters=\" + JSON.stringify(n == null ? void 0 : n.orFilters) + \"&\"), n != null && n.limit_start && (e += \"limit_start=\" + JSON.stringify(n == null ? void 0 : n.limit_start) + \"&\"), n != null && n.limit && (e += \"limit=\" + JSON.stringify(n == null ? void 0 : n.limit) + \"&\"), n != null && n.groupBy && (e += \"group_by=\" + String(n.groupBy) + \"&\"), n != null && n.orderBy) {\n    const i = `${String((t = n.orderBy) == null ? void 0 : t.field)} ${(s = (r = n.orderBy) == null ? void 0 : r.order) != null ? s : \"asc\"}`;\n    e += \"order_by=\" + i + \"&\";\n  }\n  return n != null && n.asDict && (e += \"as_dict=\" + n.asDict), e;\n}, Va = (n, e, t, r) => {\n  const {\n    url: s,\n    db: i\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te);\n  return {\n    ...vt(t === void 0 ? `${Bs(n, s)}?${La(e)}` : t, () => i.getDocList(n, e), r)\n  };\n}, ja = () => {\n  const {\n    db: n\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [i, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    t(!1), s(null), o(!1);\n  }, []);\n  return {\n    createDoc: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (a, h) => (s(null), o(!1), t(!0), n.createDoc(a, h).then((f) => (t(!1), o(!0), f)).catch((f) => {\n      throw t(!1), o(!1), s(f), f;\n    })), []),\n    loading: e,\n    error: r,\n    isCompleted: i,\n    reset: u\n  };\n}, $a = () => {\n  const {\n    db: n\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [i, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    t(!1), s(null), o(!1);\n  }, []);\n  return {\n    updateDoc: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (a, h, f) => (s(null), o(!1), t(!0), n.updateDoc(a, h, f).then((p) => (t(!1), o(!0), p)).catch((p) => {\n      throw t(!1), o(!1), s(p), p;\n    })), []),\n    loading: e,\n    error: r,\n    reset: u,\n    isCompleted: i\n  };\n}, Ma = () => {\n  const {\n    db: n\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [i, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    t(!1), s(null), o(!1);\n  }, []);\n  return {\n    deleteDoc: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (a, h) => (s(null), o(!1), t(!0), n.deleteDoc(a, h).then((f) => (t(!1), o(!0), f)).catch((f) => {\n      throw t(!1), o(!1), s(f), f;\n    })), []),\n    loading: e,\n    error: r,\n    reset: u,\n    isCompleted: i\n  };\n};\nfunction Fs(n) {\n  const e = [];\n  for (let t in n)\n    e.push(encodeURIComponent(t) + \"=\" + encodeURIComponent(n[t]));\n  return e.join(\"&\");\n}\nconst Wa = (n, e, t = !1, r = !1, s, i) => {\n  const {\n    url: o,\n    db: u\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te);\n  return {\n    ...vt(s === void 0 ? (() => {\n      const h = Fs(t ? {\n        doctype: n,\n        filters: e != null ? e : [],\n        cache: t,\n        debug: r\n      } : {\n        doctype: n,\n        filters: e != null ? e : [],\n        debug: r\n      });\n      return `${o}/api/method/frappe.client.get_count?${h}`;\n    })() : s, () => u.getCount(n, e, t, r), i)\n  };\n}, Na = (n, e, t, r) => {\n  const {\n    call: s\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), i = Fs(e != null ? e : {}), o = `${n}?${i}`;\n  return {\n    ...vt(t === void 0 ? o : t, () => s.get(n, e), r)\n  };\n}, Ha = (n) => {\n  const {\n    call: e\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [s, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [o, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [l, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r(null), i(!1), u(null), a(!1);\n  }, []);\n  return {\n    call: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (p) => (u(null), a(!1), i(!0), r(null), e.post(n, p).then((m) => (r(m), i(!1), a(!0), m)).catch((m) => {\n      throw i(!1), a(!1), u(m), m;\n    })), []),\n    result: t,\n    loading: s,\n    error: o,\n    reset: h,\n    isCompleted: l\n  };\n}, Ja = (n) => {\n  const {\n    call: e\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [s, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [o, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [l, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r(null), i(!1), u(null), a(!1);\n  }, []);\n  return {\n    call: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (p) => (u(null), a(!1), i(!0), r(null), e.put(n, p).then((m) => (r(m), i(!1), a(!0), m)).catch((m) => {\n      throw i(!1), a(!1), u(m), m;\n    })), []),\n    result: t,\n    loading: s,\n    error: o,\n    reset: h,\n    isCompleted: l\n  };\n}, Ya = (n) => {\n  const {\n    call: e\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [s, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [o, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [l, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r(null), i(!1), u(null), a(!1);\n  }, []);\n  return {\n    call: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (p) => (u(null), a(!1), i(!0), r(null), e.delete(n, p).then((m) => (r(m), i(!1), a(!0), m)).catch((m) => {\n      throw i(!1), a(!1), u(m), m;\n    })), []),\n    result: t,\n    loading: s,\n    error: o,\n    reset: h,\n    isCompleted: l\n  };\n}, za = () => {\n  const {\n    file: n\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [u, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (f, p, m) => (h(), s(!0), n.uploadFile(f, p, (g, b) => t(Math.round(g / b * 100)), m).then((g) => (l(!0), t(100), s(!1), g.data.message)).catch((g) => {\n    throw console.error(g), o(g), s(!1), g;\n  })), []), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    t(0), s(!1), o(null), l(!1);\n  }, []);\n  return {\n    upload: a,\n    progress: e,\n    loading: r,\n    isCompleted: u,\n    error: i,\n    reset: h\n  };\n}, Ka = (n, e, t = [], r = 20, s = 250) => {\n  const i = Pa(e, s);\n  return Na(\"frappe.desk.search.search_link\", {\n    doctype: n,\n    page_length: r,\n    txt: i,\n    filters: JSON.stringify(t != null ? t : [])\n  });\n}, Pa = (n, e) => {\n  const [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(n);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const s = setTimeout(() => {\n      r(n);\n    }, e);\n    return () => {\n      clearTimeout(s);\n    };\n  }, [n, e]), t;\n}, Bn = (n, e) => {\n  const {\n    socket: t\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t === void 0 && console.warn(\"Socket is not enabled. Please enable socket in FrappeProvider.\");\n    let r = t == null ? void 0 : t.on(n, e);\n    return () => {\n      r == null || r.off(n);\n    };\n  }, [n, e]);\n}, Ga = (n, e, t, r = !0) => {\n  const {\n    socket: s\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te), [i, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (s === void 0 && console.warn(\"Socket is not enabled. Please enable socket in FrappeProvider.\"), s == null || s.emit(\"doc_subscribe\", n, e), r && (s == null || s.emit(\"doc_open\", n, e)), () => {\n    s == null || s.emit(\"doc_unsubscribe\", n, e), r && (s == null || s.emit(\"doc_close\", n, e));\n  }), [n, e, r]), Bn(\"doc_update\", t);\n  const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    s == null || s.emit(\"doc_open\", n, e);\n  }, [n, e]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    s == null || s.emit(\"doc_close\", n, e);\n  }, [n, e]), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((h) => {\n    h.doctype === n && h.docname === e && o(h.users);\n  }, [n, e]);\n  return Bn(\"doc_viewers\", a), {\n    viewers: i,\n    emitDocOpen: u,\n    emitDocClose: l\n  };\n}, Xa = (n, e) => {\n  const {\n    socket: t\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (t === void 0 && console.warn(\"Socket is not enabled. Please enable socket in FrappeProvider.\"), t == null || t.emit(\"doctype_subscribe\", n), () => {\n    t == null || t.emit(\"doctype_unsubscribe\", n);\n  }), [n]), Bn(\"list_update\", e);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/frappe-react-sdk/dist/frappe-react-sdk.es.js\n");

/***/ })

};
;